type Query {
  # Authentication
  allUsers: [User!]!
  userById(id: ID!): User!

  # Workspace queries
  allWorkspaces: [Workspace!]!
  workspaceById(id: ID!): Workspace
  workspacesForUser: [WorkspaceParticipant!]!

  # Project queries
  allProjects: [Project!]!
  projectById(id: ID!): Project
  projectsForUser: [ProjectParticipant!]!

  # Course queries
  allCourses: [Course!]!
  courseById(id: ID!): Course
  coursesByWorkspace(workspaceId: ID!): [Course!]!
  courseAndPrerequisites(courseId: ID!, workspaceId: ID!): Course

  # Course link queries
  allCourseLinks: [CourseLink!]!
  linksToCourse(id: ID!): [CourseLink!]!
  linksFromCourse(id: ID!): [CourseLink!]!

  # Concept queries
  allConcepts: [Concept!]!
  conceptById(id: ID!): Concept

  # Concept link queries
  allConceptLinks: [ConceptLink!]!
  linksToConcept(id: ID!): [ConceptLink!]!
  linksFromConcept(id: ID!): [ConceptLink!]!

  # Porting queries
  exportData(workspaceId: ID!): String!
}

type Mutation {
  # Authentication mutation
  login(tmcToken: String!): AuthPayload
  createGuest: AuthPayload
  # Course mutations
  createCourse(name: String!, workspaceId: ID!): Course
  deleteCourse(id: ID!): Course
  updateCourse(id: ID!, name: String!): Course

  # Concept mutations
  createConcept(name: String!, courseId: ID, workspaceId: ID!, description: String, official: Boolean): Concept
  deleteConcept(id: ID!): Concept
  updateConcept(id: ID!, name:String, description: String, official: Boolean): Concept

  # Course link mutations
  createCourseLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): CourseLink
  deleteCourseLink(id: ID!): CourseLink

  # Concept link mutations
  createConceptLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): ConceptLink
  deleteConceptLink(id: ID!): ConceptLink

  # Project mutations
  createProject(name: String!): Project
  updateProject(id: ID!, name: String!): Project
  deleteProject(id: ID!): Project

  # Workspace mutations
  createWorkspace(name: String!, projectId: ID): Workspace
  addDefaultCourseForWorkspace(courseId: ID!, workspaceId: ID!): Workspace
  deleteWorkspace(id: ID!): Workspace
  updateWorkspace(id: ID!, name: String!): Workspace

  # Porting mutations
  importData(data: String!): Workspace

  # User mutations
  updateUser(id: ID!, guideProgress: Int!): User

  ## Resource mutation
  # createResourceForConcept(conceptId: ID!, name: String!, desc: String, urls: [String!]!): Resource
}

type AuthPayload {
  token: String!
  user: User!
}
