scalar DateTime

type Query {
  ownedWorkSpaces: [WorkSpace!]!
  allResources: [Resource!]!
  allURLs: [URL!]!
  allConcepts: [Concept!]!
  allCourses: [Course!]!
  courseById(id: ID!): Course
  conceptById(id: ID!): Concept
  allLinks: [Link!]!
  linksToConcept(id: ID!): [Link!]!
  linksFromConcept(id: ID!): [Link!]!
}

type Mutation {
  login(tmcToken: String!): AuthPayload
  createWorkspace(name: String!): WorkSpace
  addCourseAsCoursePrerequisite(id: ID!, prerequisite_id: ID!): Course
  deleteCourseAsCoursePrerequisite(id: ID!, prerequisite_id: ID!): Course
  createConceptAsPrerequisite(name: String!, course_id:ID!, desc: String, official: Boolean): Concept
  createConceptAsLearningObjective(name: String!, course_id:ID!, desc: String, official: Boolean): Concept
  createResourceWithURLs(concept_id: ID!, name: String!, desc: String, urls: [String!]!): Resource
  createURL(address: String!, resource_id: ID!): URL
  createResource(name: String!, concept_id: ID!, desc: String!): Resource
  updateConcept(id: ID!, name:String, desc: String): Concept
  createCourse(name: String!, workspace_id: ID!): Course
  deleteCourse(id: ID!): Course
  updateCourse(id: ID!, name: String!): Course
  createConcept(name: String!, course_id:ID!, desc: String, official: Boolean): Concept
  deleteConcept(id: ID!): Concept
  createLink(to: ID!, from: ID!, official: Boolean): Link
  createConceptAndLinkTo(name: String!, desc: String, official: Boolean, to: ID!, linkOfficial: Boolean): Link
  deleteLink(id: ID!): Link
}

type User {
  id: ID!
  tmcId: Int!
  role: Role!
  workspaceOwned: [WorkSpace!]!
  workspacesParticipated: [WorkSpace!]!
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

type WorkSpace {
  id: ID!
  name: String!
  owner: User!
  participants: [User!]!
  course: Course!
  prerequisiteCourses: [Course!]!
  concepts: [Concept!]!
}

type AuthPayload {
  token: String!
  user: User!
}

type Course {
  id: ID!
  name: String!
  concepts: [Concept!]!
  prerequisites: [Concept!]!
  learningObjectives: [Concept!]!
  prerequisiteCourses: [Course!]!
  workspaces: [WorkSpace!]!
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  linksFromConcept: [Link!]!
  linksToConcept: [Link!]!
  courses: [Course!]!
  resources: [Resource!]!
  asPrerequisite: [Course!]!
  asLearningObjective: [Course!]!
}

type Resource {
  id: ID!
  concept: [Concept]!
  name: String!
  description: String!
  urls: [URL!]!
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}

type Link {
  id: ID!
  from: Concept!
  to: Concept!
  # user: User!
  official: Boolean!
}