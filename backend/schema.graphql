scalar DateTime

type Query {
  allResources: [Resource!]!
  allURLs: [URL!]!
  allConcepts: [Concept!]!
  allCourses: [Course!]!
  courseById(id: ID!): Course
  conceptById(id: ID!): Concept
  allLinks: [Link!]!
  linksToConcept(id: ID!): [Link!]!
  linksFromConcept(id: ID!): [Link!]!
}

type Mutation {
  createURL(address: String!, resource_id: ID!): URL
  createResource(name: String!, concept_id: ID!, desc: String!): Resource
  updateConcept(id: ID!, name:String!, desc: String): Concept
  createCourse(name: String!): Course
  deleteCourse(id: ID!): Course
  createConcept(name: String!, course_id:ID!, desc: String, official: Boolean): Concept
  deleteConcept(id: ID!): Concept
  createLink(to: ID!, from: ID!, official: Boolean): Link
  createConceptAndLinkTo(name: String!, desc: String, official: Boolean, to: ID!, linkOfficial: Boolean): Link
  deleteLink(id: ID!): Link
}

# type User {
#   id: ID!
#   username: String!
# }

type Course {
  id: ID!
  name: String!
  concepts: [Concept!]!
}

# type Instance {
#   id: ID!
#   start_date: DateTime!
#   end_date: DateTime!
#   period: [Int!]!
#   course: Course!
# }

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  linksFromConcept: [Link!]!
  linksToConcept: [Link!]!
  courses: [Course!]!
  resources: [Resource!]!
}

type Resource {
  id: ID!
  concept: Concept!
  name: String!
  description: String!
  urls: [URL!]!
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}

type Link {
  id: ID!
  from: Concept!
  to: Concept!
  # user: User!
  official: Boolean!
}