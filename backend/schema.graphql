scalar DateTime

type Query {
  allWorkspaces: [Workspace!]!
  workspaceById(id: ID!): Workspace
  
  allProjects: [Project!]!
  projectById(id: ID!): Project

  allCourses: [Course!]!
  courseById(id: ID!): Course
  allCourseLinks: [CourseLink!]!
  linksToCourse(id: ID!): [CourseLink!]!
  linksFromCourse(id: ID!): [CourseLink!]!

  allConcepts: [Concept!]!
  conceptById(id: ID!): Concept
  allConceptLinks: [ConceptLink!]!
  linksToConcept(id: ID!): [ConceptLink!]!
  linksFromConcept(id: ID!): [ConceptLink!]!
}

type Mutation {
  login(tmcToken: String!): AuthPayload
  
  # createCourse(name: String!, workspaceId: ID!): Course
  # deleteCourse(id: ID!): Course
  # updateCourse(id: ID!, name: String!): Course

  # createConcept(name: String!, workspaceId: ID!, desc: String, official: Boolean): Concept
  # deleteConcept(id: ID!): Concept
  # updateConcept(id: ID!, name:String, desc: String): Concept
  
  # createCourseLink(targetCourse: ID!, prerequisiteCourse: ID!, official: Boolean): CourseLink
  # deleteCourseLink(id: ID!): CourseLink
  
  # createConceptLink(targetConcept: ID!, prerequisiteConcept: ID!, official: Boolean): ConceptLink
  # deleteConceptLink(id: ID!): ConceptLink

  # createResourceForCourse(courseId: ID!, name: String!, desc: String, urls: [String!]!): Resource
  # createResourceForConcept(conceptId: ID!, name: String!, desc: String, urls: [String!]!): Resource
}

type User {
  id: ID!
  tmcId: Int!
  role: Role!
  asProjectOwner: [Project!]!
  asProjectParticipant: [Project!]!
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

type Project {
  id: ID!
  name: String!
  owner: User!
  participants: [User!]!
  workspaces: [Workspace!]!
  template: Workspace!
}

type Workspace {
  id: ID!
  project: Project!
  user: User!
  defaultCourse: Course!
  courses: [Course!]!
  concepts: [Concept!]!
  conceptLinks: [ConceptLink!]!
  courseLinks: [CourseLink!]!
}

type AuthPayload {
  token: String!
  user: User!
}

type Course {
  id: ID!
  name: String!
  createdBy: User!
  linksFromCourse: [CourseLink!]! 
  linksToCourse: [CourseLink!]! 
  concepts: [Concept!]! 
  workspaces: [Workspace!]! 
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  createdBy: User!
  linksFromConcept: [ConceptLink!]! 
  linksToConcept: [ConceptLink!]! 
  courses: [Course!]! 
  resources: [Resource!]!
  workspaces: [Workspace!]! 
}

type Resource {
  id: ID!
  concept: [Concept]!
  name: String!
  description: String!
  urls: [URL!]!
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}

type CourseLink {
  id: ID!
  from: Course!
  to: Course!
  official: Boolean!
  workspace: [Workspace!]!
}

type ConceptLink {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
  workspace: [Workspace!]!
}