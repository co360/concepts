# import ConceptSubscriptionPayload from "./prisma-client/prisma.graphql"

type Query {
  # Authentication
  allUsers: [User!]!
  userById(id: ID!): User!

  # Workspace queries
  allWorkspaces: [Workspace!]!
  workspaceById(id: ID!): Workspace
  workspacesForUser: [WorkspaceParticipant!]!

  # Project queries
  allProjects: [Project!]!
  projectById(id: ID!): Project
  limitedProjectById(id: ID!): LimitedProject
  projectsForUser: [ProjectParticipant!]!

  # Course queries
  allCourses: [Course!]!
  courseById(id: ID!): Course
  coursesByWorkspace(workspaceId: ID!): [Course!]!
  courseAndPrerequisites(courseId: ID!): Course

  # Course link queries
  allCourseLinks: [CourseLink!]!
  linksToCourse(id: ID!): [CourseLink!]!
  linksFromCourse(id: ID!): [CourseLink!]!

  # Concept queries
  allConcepts: [Concept!]!
  conceptById(id: ID!): Concept

  # Concept link queries
  allConceptLinks: [ConceptLink!]!
  linksToConcept(id: ID!): [ConceptLink!]!
  linksFromConcept(id: ID!): [ConceptLink!]!

  # Porting queries
  exportData(workspaceId: ID!): String!

  # Project
  workspaceBySourceTemplate(sourceId: ID!): Workspace

  # Sharing
  peekToken(id: ID!): ProjectOrWorkspace
  workspaceMemberInfo(id: ID!): [MemberInfo]!
  projectMemberInfo(id: ID!): [MemberInfo]!
}

type Mutation {
  # Authentication mutation
  login(tmcToken: String!): AuthPayload
  createGuest: AuthPayload
  # Course mutations
  createCourse(name: String!, workspaceId: ID!, official: Boolean, frozen: Boolean, tags: [TagCreateInput!]): Course
  deleteCourse(id: ID!): Course
  updateCourse(id: ID!, name: String!, official: Boolean, frozen: Boolean, tags: [TagUpdateInput!]): Course

  # Concept mutations
  createConcept(name: String!, courseId: ID, workspaceId: ID!, description: String, official: Boolean, frozen: Boolean, tags: [TagCreateInput!]): Concept
  deleteConcept(id: ID!): DeletedConcept
  updateConcept(id: ID!, name: String, description: String, official: Boolean, frozen: Boolean, tags: [TagUpdateInput!]): Concept

  # Course link mutations
  createCourseLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): CourseLink
  updateCourseLink(id: ID!, frozen: Boolean, official: Boolean): CourseLink
  deleteCourseLink(id: ID!): CourseLink

  # Concept link mutations
  createConceptLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): ConceptLink
  deleteConceptLink(id: ID!): ConceptLink

  # Project mutations
  createProject(name: String!): Project
  updateProject(id: ID!, name: String!): Project
  deleteProject(id: ID!): Project
  setActiveTemplate(projectId: ID!, workspaceId: ID!): Project

  # Workspace mutations
  createWorkspace(name: String!, projectId: ID): Workspace
  deleteWorkspace(id: ID!): Workspace
  updateWorkspace(id: ID!, name: String!): Workspace

  # Template workspace mutations
  createTemplateWorkspace(projectId: ID!, name: String!): Workspace
  deleteTemplateWorkspace(id: ID!): Workspace
  updateTemplateWorkspace(id: ID!, name: String, active: Boolean, courseId: ID): Workspace
  cloneTemplateWorkspace(projectId: ID!, name: String!): Workspace

  # PointGroup
  createPointGroup(name: String!, startDate: String!, endDate: String!, maxPoints: Int!,
    pointsPerConcept: Float!, courseId: ID!, workspaceId: ID!): PointGroup
  deletePointGroup(id: ID!): PointGroup
  updatePointGroup(id: ID!, name: String, startDate: String, endDate: String, maxPoints: Int,
    pointsPerConcept: Float): PointGroup

  # Porting mutations
  importData(data: String!): Workspace

  # User mutations
  updateUser(id: ID!, guideProgress: Int!): User

  # Sharing
  createWorkspaceToken(workspaceId: ID!, privilege: Privilege!): WorkspaceToken
  createProjectToken(projectId: ID!, privilege: Privilege!): ProjectToken
  deleteToken(id: ID!): ProjectOrWorkspaceToken
  useToken(id: ID!): ProjectOrWorkspaceParticipant
  updateParticipant(type: Type!, id: ID!, privilege: Privilege!): IDAndPrivilege
  deleteParticipant(type: Type!, id: ID!): ID

  # Merging
  mergeWorkspaces(projectId: ID!): Workspace!
  mergeConcepts(workspaceId: ID!, courseId: ID!, conceptIds: [ID!]!, name: String, description: String, official: Boolean, frozen: Boolean, tags: [TagCreateInput!]): Concept!
}

type Subscription {
  concepts(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
}

union ProjectOrWorkspace = Workspace | Project | LimitedProject
union ProjectOrWorkspaceParticipant = WorkspaceParticipant | ProjectParticipant
union ProjectOrWorkspaceToken = WorkspaceToken | ProjectToken

type IDAndPrivilege {
  id: ID!
  privilege: Privilege!
}

enum Type {
  PROJECT
  WORKSPACE
}

type LimitedProject {
  id: ID!
  name: String!
  activeTemplateId: ID!
  participants: [ProjectParticipant!]!
}

type DeletedConcept {
  id: ID!
  courseId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

input TagCreateInput {
  name: String!
  type: String
  priority: Int
}

input TagUpdateInput {
  id: ID
  name: String!
  type: String
  priority: Int
}

type MemberInfo {
  participantId: ID!
  id: ID!
  role: Role
  privilege: Privilege
  token: LimitedToken
  tmcId: ID
  name: String
  email: String
  username: String
}

type LimitedToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
}
scalar DateTime

type User {
  id: ID!
  tmcId: Int
  role: Role!
  workspaceParticipations: [WorkspaceParticipant!]!
  projectParticipations: [ProjectParticipant!]!
  createdAt: DateTime!
  guideProgress: Int!
  lastActivity: DateTime
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

enum Privilege {
  CLONE,
  VIEW,
  EDIT,
  OWNER
}

type Project {
  id: ID!
  name: String!
  workspaces: [Workspace!]!
  activeTemplate: Workspace
  templates: [Workspace!]!
  merges: [Workspace!]!
  participants: [ProjectParticipant!]!
  tokens: [ProjectToken!]!
}

type Workspace {
  id: ID!
  name: String!
  sourceProject: Project
  sourceTemplate: Workspace
  asMerge: Project
  asTemplate: Project
  clones: [Workspace!]!
  courses: [Course!]!
  concepts: [Concept!]!
  conceptLinks: [ConceptLink!]!
  courseLinks: [CourseLink!]!
  participants: [WorkspaceParticipant!]!
  tokens: [WorkspaceToken!]!
  mainCourse: Course
  pointGroups: [PointGroup!]!
}

type WorkspaceParticipant {
  id: ID!
  privilege: Privilege!
  workspace: Workspace!
  token: WorkspaceToken
  user: User!
}

type ProjectParticipant {
  id: ID!
  privilege: Privilege!
  project: Project!
  token: ProjectToken
  user: User!
}

type WorkspaceToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
  workspace: Workspace!
  participants: [WorkspaceParticipant!]!
}

type ProjectToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
  project: Project!
  participants: [ProjectParticipant!]!
}

type CourseLink {
  id: ID!
  from: Course!
  to: Course!
  official: Boolean!
  frozen: Boolean!
  createdBy: User!
  workspace: Workspace!
  weight: Int!
  count: Int!
}

type Course {
  id: ID!
  name: String!
  official: Boolean!
  frozen: Boolean!
  createdBy: User!
  sourceCourse: Course
  clones: [Course!]!
  linksFromCourse: [CourseLink!]!
  linksToCourse: [CourseLink!]!
  concepts: [Concept!]!
  workspace: Workspace!
  tags: [Tag!]!
}

type ConceptLink {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
  frozen: Boolean!
  workspace: Workspace!
  createdBy: User!
  weight: Int!
  count: Int!
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  frozen: Boolean!
  createdBy: User!
  sourceConcept: Concept
  clones: [Concept!]!
  linksFromConcept: [ConceptLink!]!
  linksToConcept: [ConceptLink!]!
  course: Course!
  resources: [Resource!]!
  workspace: Workspace!
  tags: [Tag!]!
  count: Int!
}

type PointGroup {
  id: ID!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  maxPoints: Int!
  workspace: Workspace!
  course: Course!
  pointsPerConcept: Float!
  completions: [Completion!]!
}

type Completion {
  id: ID!
  user: User!
  conceptAmount: Int!
  createdAt: DateTime!
  pointGroup: PointGroup!
}

type Tag {
  id: ID!
  name: String!
  type: String!
  priority: Int!
}

type Resource {
  id: ID!
  concept: Concept!
  name: String!
  description: String!
  urls: [URL!]!
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}
