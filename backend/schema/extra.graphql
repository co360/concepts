# import ConceptSubscriptionPayload from "./prisma-client/prisma.graphql"

type Query {
  # Authentication
  allUsers: [User!]!
  userById(id: ID!): User!
  googleClientId: GoogleClientID

  # Project queries
  allProjects: [Project!]!
  projectsForUser: [ProjectParticipant!]!
  projectById(id: ID!): Project
  limitedProjectById(id: ID!): LimitedProject

  # Workspace queries
  allWorkspaces: [Workspace!]!
  workspacesForUser: [WorkspaceParticipant!]!
  workspaceById(id: ID!): Workspace
  workspaceBySourceTemplate(sourceId: ID!): Workspace

  # Course queries
  courseById(id: ID!): Course
  conceptsByCourse(id: ID!): [Concept!]!

  # Porting queries
  exportData(workspaceId: ID!): String!

  # Sharing
  peekToken(id: ID!): ProjectOrWorkspace
  workspaceMemberInfo(id: ID!): [MemberInfo]!
  projectMemberInfo(id: ID!): [MemberInfo]!
}

type Mutation {
  # Authentication mutation
  login(tmcToken: String!): AuthPayload
  loginGoogle(idToken: String!): AuthPayload
  mergeUser(accessToken: String!): Boolean
  createGuest: AuthPayload

  # Course mutations
  createCourse(name: String!, workspaceId: ID!, official: Boolean, frozen: Boolean, tags: [TagInput!]): Course
  deleteCourse(id: ID!): Course
  updateCourse(id: ID!, name: String!, official: Boolean, frozen: Boolean, tags: [TagInput!]): Course

  # Concept mutations
  createConcept(name: String!, courseId: ID, workspaceId: ID!, description: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept
  deleteConcept(id: ID!): DeletedConcept
  updateConcept(id: ID!, name: String, description: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept

  # Course link mutations
  createCourseLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): CourseLink
  updateCourseLink(id: ID!, frozen: Boolean, official: Boolean): CourseLink
  deleteCourseLink(id: ID!): CourseLink

  # Concept link mutations
  createConceptLink(to: ID!, from: ID!, workspaceId: ID!, official: Boolean): ConceptLink
  deleteConceptLink(id: ID!): ConceptLink

  # Project mutations
  createProject(name: String!): Project
  updateProject(id: ID!, name: String!): Project
  deleteProject(id: ID!): Project
  setActiveTemplate(projectId: ID!, workspaceId: ID!): Project

  # Workspace mutations
  createWorkspace(name: String!, projectId: ID): Workspace
  deleteWorkspace(id: ID!): Workspace
  updateWorkspace(id: ID!, name: String!): Workspace

  # Template workspace mutations
  createTemplateWorkspace(projectId: ID!, name: String!): Workspace
  deleteTemplateWorkspace(id: ID!): Workspace
  updateTemplateWorkspace(id: ID!, name: String, active: Boolean, courseId: ID): Workspace
  cloneTemplateWorkspace(projectId: ID!, name: String!): Workspace

  # PointGroup
  createPointGroup(name: String!, startDate: String!, endDate: String!, maxPoints: Int!,
    pointsPerConcept: Float!, courseId: ID!, workspaceId: ID!): PointGroup
  deletePointGroup(id: ID!): PointGroup
  updatePointGroup(id: ID!, name: String, startDate: String, endDate: String, maxPoints: Int,
    pointsPerConcept: Float): PointGroup

  # Porting mutations
  importData(data: String!): Workspace

  # Sharing
  createWorkspaceToken(workspaceId: ID!, privilege: Privilege!): WorkspaceToken
  createProjectToken(projectId: ID!, privilege: Privilege!): ProjectToken
  deleteToken(id: ID!): ProjectOrWorkspaceToken
  useToken(id: ID!): ProjectOrWorkspaceParticipant
  updateParticipant(type: Type!, id: ID!, privilege: Privilege!): IDAndPrivilege
  deleteParticipant(type: Type!, id: ID!): ID

  # Merging
  mergeWorkspaces(projectId: ID!): Workspace!
  mergeConcepts(workspaceId: ID!, courseId: ID!, conceptIds: [ID!]!, name: String, description: String, official: Boolean, frozen: Boolean, tags: [TagInput!]): Concept!
}

type Subscription {
  # Concept subscriptions
  conceptCreated: Concept!
  conceptUpdated: Concept!
  conceptDeleted: Concept!

  # ConceptLinks subscriptions
  conceptLinkCreated: ConceptLink!
  conceptLinkDeleted: ConceptLink!

  # Courses subscriptions
  courseCreated: Course!
  courseUpdated: Course!
  courseDeleted: Course!

  # CoursesLinks subscriptions
  courseLinkCreated: CourseLink!
  courseLinkUpdated: CourseLink!
  courseLinkDeleted: CourseLink!

  # Workspaces subscriptions
  workspaceCreated: Workspace!
  workspaceUpdated: Workspace!
  workspaceDeleted: Workspace!
}

union ProjectOrWorkspace = Workspace | Project | LimitedProject
union ProjectOrWorkspaceParticipant = WorkspaceParticipant | ProjectParticipant
union ProjectOrWorkspaceToken = WorkspaceToken | ProjectToken

type IDAndPrivilege {
  id: ID!
  privilege: Privilege!
}

enum Type {
  PROJECT
  WORKSPACE
}

type LimitedProject {
  id: ID!
  name: String!
  activeTemplateId: ID!
  participants: [ProjectParticipant!]!
}

type DeletedConcept {
  id: ID!
  courseId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

type GoogleClientID {
  enabled: Boolean!
  clientId: String
}

input TagInput {
  id: ID
  name: String!
  type: String
  priority: Int
}

type MemberInfo {
  participantId: ID!
  id: ID!
  role: Role
  privilege: Privilege
  token: LimitedToken
  tmcId: ID
  name: String
  email: String
  username: String
}

type LimitedToken {
  id: ID!
  privilege: Privilege!
  revoked: Boolean!
}
