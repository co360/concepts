module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConcept {
  count: Int!
}

type AggregateConceptLink {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateCourseLink {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateURL {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  linksFromConcept(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  linksToConcept(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type ConceptConnection {
  pageInfo: PageInfo!
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutWorkspacesInput {
  create: [ConceptCreateWithoutWorkspacesInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateWithoutCoursesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  resources: ResourceCreateManyWithoutConceptInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutLinksFromConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutLinksToConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutResourcesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutWorkspacesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkCreateManyWithoutFromInput
  linksToConcept: ConceptLinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
}

type ConceptEdge {
  node: Concept!
  cursor: String!
}

type ConceptLink {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
  workspace(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type ConceptLinkConnection {
  pageInfo: PageInfo!
  edges: [ConceptLinkEdge]!
  aggregate: AggregateConceptLink!
}

input ConceptLinkCreateInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutConceptLinksInput
}

input ConceptLinkCreateManyWithoutFromInput {
  create: [ConceptLinkCreateWithoutFromInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateManyWithoutToInput {
  create: [ConceptLinkCreateWithoutToInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateManyWithoutWorkspaceInput {
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
  connect: [ConceptLinkWhereUniqueInput!]
}

input ConceptLinkCreateWithoutFromInput {
  id: ID
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutConceptLinksInput
}

input ConceptLinkCreateWithoutToInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutConceptLinksInput
}

input ConceptLinkCreateWithoutWorkspaceInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
}

type ConceptLinkEdge {
  node: ConceptLink!
  cursor: String!
}

enum ConceptLinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
}

type ConceptLinkPreviousValues {
  id: ID!
  official: Boolean!
}

input ConceptLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  AND: [ConceptLinkScalarWhereInput!]
  OR: [ConceptLinkScalarWhereInput!]
  NOT: [ConceptLinkScalarWhereInput!]
}

type ConceptLinkSubscriptionPayload {
  mutation: MutationType!
  node: ConceptLink
  updatedFields: [String!]
  previousValues: ConceptLinkPreviousValues
}

input ConceptLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptLinkWhereInput
  AND: [ConceptLinkSubscriptionWhereInput!]
  OR: [ConceptLinkSubscriptionWhereInput!]
  NOT: [ConceptLinkSubscriptionWhereInput!]
}

input ConceptLinkUpdateInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutConceptLinksInput
}

input ConceptLinkUpdateManyDataInput {
  official: Boolean
}

input ConceptLinkUpdateManyMutationInput {
  official: Boolean
}

input ConceptLinkUpdateManyWithoutFromInput {
  create: [ConceptLinkCreateWithoutFromInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithoutToInput {
  create: [ConceptLinkCreateWithoutToInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutToInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithoutWorkspaceInput {
  create: [ConceptLinkCreateWithoutWorkspaceInput!]
  delete: [ConceptLinkWhereUniqueInput!]
  connect: [ConceptLinkWhereUniqueInput!]
  set: [ConceptLinkWhereUniqueInput!]
  disconnect: [ConceptLinkWhereUniqueInput!]
  update: [ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [ConceptLinkScalarWhereInput!]
  updateMany: [ConceptLinkUpdateManyWithWhereNestedInput!]
}

input ConceptLinkUpdateManyWithWhereNestedInput {
  where: ConceptLinkScalarWhereInput!
  data: ConceptLinkUpdateManyDataInput!
}

input ConceptLinkUpdateWithoutFromDataInput {
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutConceptLinksInput
}

input ConceptLinkUpdateWithoutToDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutConceptLinksInput
}

input ConceptLinkUpdateWithoutWorkspaceDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
}

input ConceptLinkUpdateWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutFromDataInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutToDataInput!
}

input ConceptLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput!
  data: ConceptLinkUpdateWithoutWorkspaceDataInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutFromInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutFromDataInput!
  create: ConceptLinkCreateWithoutFromInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutToInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutToDataInput!
  create: ConceptLinkCreateWithoutToInput!
}

input ConceptLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: ConceptLinkWhereUniqueInput!
  update: ConceptLinkUpdateWithoutWorkspaceDataInput!
  create: ConceptLinkCreateWithoutWorkspaceInput!
}

input ConceptLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: ConceptWhereInput
  to: ConceptWhereInput
  official: Boolean
  official_not: Boolean
  workspace_every: WorkspaceWhereInput
  workspace_some: WorkspaceWhereInput
  workspace_none: WorkspaceWhereInput
  AND: [ConceptLinkWhereInput!]
  OR: [ConceptLinkWhereInput!]
  NOT: [ConceptLinkWhereInput!]
}

input ConceptLinkWhereUniqueInput {
  id: ID
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  official_ASC
  official_DESC
}

type ConceptPreviousValues {
  id: ID!
  name: String!
  description: String
  official: Boolean!
}

input ConceptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  AND: [ConceptScalarWhereInput!]
  OR: [ConceptScalarWhereInput!]
  NOT: [ConceptScalarWhereInput!]
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
  AND: [ConceptSubscriptionWhereInput!]
  OR: [ConceptSubscriptionWhereInput!]
  NOT: [ConceptSubscriptionWhereInput!]
}

input ConceptUpdateInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateManyDataInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyMutationInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutCoursesInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutCoursesInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutWorkspacesInput {
  create: [ConceptCreateWithoutWorkspacesInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutWorkspacesInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutWorkspacesInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput!
  data: ConceptUpdateManyDataInput!
}

input ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  update: ConceptUpdateWithoutLinksFromConceptDataInput
  upsert: ConceptUpsertWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  update: ConceptUpdateWithoutLinksToConceptDataInput
  upsert: ConceptUpsertWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  update: ConceptUpdateWithoutResourcesDataInput
  upsert: ConceptUpsertWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateWithoutCoursesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  resources: ResourceUpdateManyWithoutConceptInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutLinksFromConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutLinksToConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutResourcesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutWorkspacesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: ConceptLinkUpdateManyWithoutFromInput
  linksToConcept: ConceptLinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutCoursesDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutWorkspacesInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutWorkspacesDataInput!
}

input ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput!
  create: ConceptCreateWithoutLinksFromConceptInput!
}

input ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput!
  create: ConceptCreateWithoutLinksToConceptInput!
}

input ConceptUpsertWithoutResourcesInput {
  update: ConceptUpdateWithoutResourcesDataInput!
  create: ConceptCreateWithoutResourcesInput!
}

input ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutCoursesDataInput!
  create: ConceptCreateWithoutCoursesInput!
}

input ConceptUpsertWithWhereUniqueWithoutWorkspacesInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutWorkspacesDataInput!
  create: ConceptCreateWithoutWorkspacesInput!
}

input ConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  linksFromConcept_every: ConceptLinkWhereInput
  linksFromConcept_some: ConceptLinkWhereInput
  linksFromConcept_none: ConceptLinkWhereInput
  linksToConcept_every: ConceptLinkWhereInput
  linksToConcept_some: ConceptLinkWhereInput
  linksToConcept_none: ConceptLinkWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  resources_every: ResourceWhereInput
  resources_some: ResourceWhereInput
  resources_none: ResourceWhereInput
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  AND: [ConceptWhereInput!]
  OR: [ConceptWhereInput!]
  NOT: [ConceptWhereInput!]
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
  workspaces: WorkspaceCreateManyWithoutCoursesInput
}

input CourseCreateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutWorkspacesInput {
  create: [CourseCreateWithoutWorkspacesInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutConceptsInput {
  id: ID
  name: String!
  workspaces: WorkspaceCreateManyWithoutCoursesInput
}

input CourseCreateWithoutWorkspacesInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
}

type CourseEdge {
  node: Course!
  cursor: String!
}

type CourseLink {
  id: ID!
  from: Course!
  to: Course!
  official: Boolean!
  workspace(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type CourseLinkConnection {
  pageInfo: PageInfo!
  edges: [CourseLinkEdge]!
  aggregate: AggregateCourseLink!
}

input CourseLinkCreateInput {
  id: ID
  from: CourseCreateOneInput!
  to: CourseCreateOneInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutCourseLinksInput
}

input CourseLinkCreateManyWithoutWorkspaceInput {
  create: [CourseLinkCreateWithoutWorkspaceInput!]
  connect: [CourseLinkWhereUniqueInput!]
}

input CourseLinkCreateWithoutWorkspaceInput {
  id: ID
  from: CourseCreateOneInput!
  to: CourseCreateOneInput!
  official: Boolean
}

type CourseLinkEdge {
  node: CourseLink!
  cursor: String!
}

enum CourseLinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
}

type CourseLinkPreviousValues {
  id: ID!
  official: Boolean!
}

input CourseLinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  AND: [CourseLinkScalarWhereInput!]
  OR: [CourseLinkScalarWhereInput!]
  NOT: [CourseLinkScalarWhereInput!]
}

type CourseLinkSubscriptionPayload {
  mutation: MutationType!
  node: CourseLink
  updatedFields: [String!]
  previousValues: CourseLinkPreviousValues
}

input CourseLinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseLinkWhereInput
  AND: [CourseLinkSubscriptionWhereInput!]
  OR: [CourseLinkSubscriptionWhereInput!]
  NOT: [CourseLinkSubscriptionWhereInput!]
}

input CourseLinkUpdateInput {
  from: CourseUpdateOneRequiredInput
  to: CourseUpdateOneRequiredInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutCourseLinksInput
}

input CourseLinkUpdateManyDataInput {
  official: Boolean
}

input CourseLinkUpdateManyMutationInput {
  official: Boolean
}

input CourseLinkUpdateManyWithoutWorkspaceInput {
  create: [CourseLinkCreateWithoutWorkspaceInput!]
  delete: [CourseLinkWhereUniqueInput!]
  connect: [CourseLinkWhereUniqueInput!]
  set: [CourseLinkWhereUniqueInput!]
  disconnect: [CourseLinkWhereUniqueInput!]
  update: [CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [CourseLinkScalarWhereInput!]
  updateMany: [CourseLinkUpdateManyWithWhereNestedInput!]
}

input CourseLinkUpdateManyWithWhereNestedInput {
  where: CourseLinkScalarWhereInput!
  data: CourseLinkUpdateManyDataInput!
}

input CourseLinkUpdateWithoutWorkspaceDataInput {
  from: CourseUpdateOneRequiredInput
  to: CourseUpdateOneRequiredInput
  official: Boolean
}

input CourseLinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput!
  data: CourseLinkUpdateWithoutWorkspaceDataInput!
}

input CourseLinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseLinkWhereUniqueInput!
  update: CourseLinkUpdateWithoutWorkspaceDataInput!
  create: CourseLinkCreateWithoutWorkspaceInput!
}

input CourseLinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: CourseWhereInput
  to: CourseWhereInput
  official: Boolean
  official_not: Boolean
  workspace_every: WorkspaceWhereInput
  workspace_some: WorkspaceWhereInput
  workspace_none: WorkspaceWhereInput
  AND: [CourseLinkWhereInput!]
  OR: [CourseLinkWhereInput!]
  NOT: [CourseLinkWhereInput!]
}

input CourseLinkWhereUniqueInput {
  id: ID
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  workspaces: WorkspaceUpdateManyWithoutCoursesInput
}

input CourseUpdateInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  workspaces: WorkspaceUpdateManyWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  name: String
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutConceptsInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutConceptsInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutWorkspacesInput {
  create: [CourseCreateWithoutWorkspacesInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutWorkspacesInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutWorkspacesInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneRequiredInput {
  create: CourseCreateInput
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutConceptsDataInput {
  name: String
  workspaces: WorkspaceUpdateManyWithoutCoursesInput
}

input CourseUpdateWithoutWorkspacesDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
}

input CourseUpdateWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutConceptsDataInput!
}

input CourseUpdateWithWhereUniqueWithoutWorkspacesInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutWorkspacesDataInput!
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutConceptsDataInput!
  create: CourseCreateWithoutConceptsInput!
}

input CourseUpsertWithWhereUniqueWithoutWorkspacesInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutWorkspacesDataInput!
  create: CourseCreateWithoutWorkspacesInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createConcept(data: ConceptCreateInput!): Concept!
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  createConceptLink(data: ConceptLinkCreateInput!): ConceptLink!
  updateConceptLink(data: ConceptLinkUpdateInput!, where: ConceptLinkWhereUniqueInput!): ConceptLink
  updateManyConceptLinks(data: ConceptLinkUpdateManyMutationInput!, where: ConceptLinkWhereInput): BatchPayload!
  upsertConceptLink(where: ConceptLinkWhereUniqueInput!, create: ConceptLinkCreateInput!, update: ConceptLinkUpdateInput!): ConceptLink!
  deleteConceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  deleteManyConceptLinks(where: ConceptLinkWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createCourseLink(data: CourseLinkCreateInput!): CourseLink!
  updateCourseLink(data: CourseLinkUpdateInput!, where: CourseLinkWhereUniqueInput!): CourseLink
  updateManyCourseLinks(data: CourseLinkUpdateManyMutationInput!, where: CourseLinkWhereInput): BatchPayload!
  upsertCourseLink(where: CourseLinkWhereUniqueInput!, create: CourseLinkCreateInput!, update: CourseLinkUpdateInput!): CourseLink!
  deleteCourseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  deleteManyCourseLinks(where: CourseLinkWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createResource(data: ResourceCreateInput!): Resource!
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateManyResources(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): BatchPayload!
  upsertResource(where: ResourceWhereUniqueInput!, create: ResourceCreateInput!, update: ResourceUpdateInput!): Resource!
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
  createURL(data: URLCreateInput!): URL!
  updateURL(data: URLUpdateInput!, where: URLWhereUniqueInput!): URL
  updateManyURLs(data: URLUpdateManyMutationInput!, where: URLWhereInput): BatchPayload!
  upsertURL(where: URLWhereUniqueInput!, create: URLCreateInput!, update: URLUpdateInput!): URL!
  deleteURL(where: URLWhereUniqueInput!): URL
  deleteManyURLs(where: URLWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  upsertWorkspace(where: WorkspaceWhereUniqueInput!, create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!): Workspace!
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  name: String!
  owner: User!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  type: WorkspaceType!
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  template: Workspace!
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutProjectsOwnedInput!
  participants: UserCreateManyWithoutProjectsInput
  type: WorkspaceType!
  workspaces: WorkspaceCreateManyInput
  template: WorkspaceCreateOneInput!
}

input ProjectCreateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutParticipantsInput {
  create: [ProjectCreateWithoutParticipantsInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutOwnerInput {
  id: ID
  name: String!
  participants: UserCreateManyWithoutProjectsInput
  type: WorkspaceType!
  workspaces: WorkspaceCreateManyInput
  template: WorkspaceCreateOneInput!
}

input ProjectCreateWithoutParticipantsInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutProjectsOwnedInput!
  type: WorkspaceType!
  workspaces: WorkspaceCreateManyInput
  template: WorkspaceCreateOneInput!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  type: WorkspaceType!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: WorkspaceType
  type_not: WorkspaceType
  type_in: [WorkspaceType!]
  type_not_in: [WorkspaceType!]
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  name: String
  owner: UserUpdateOneRequiredWithoutProjectsOwnedInput
  participants: UserUpdateManyWithoutProjectsInput
  type: WorkspaceType
  workspaces: WorkspaceUpdateManyInput
  template: WorkspaceUpdateOneRequiredInput
}

input ProjectUpdateManyDataInput {
  name: String
  type: WorkspaceType
}

input ProjectUpdateManyMutationInput {
  name: String
  type: WorkspaceType
}

input ProjectUpdateManyWithoutOwnerInput {
  create: [ProjectCreateWithoutOwnerInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutParticipantsInput {
  create: [ProjectCreateWithoutParticipantsInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutOwnerDataInput {
  name: String
  participants: UserUpdateManyWithoutProjectsInput
  type: WorkspaceType
  workspaces: WorkspaceUpdateManyInput
  template: WorkspaceUpdateOneRequiredInput
}

input ProjectUpdateWithoutParticipantsDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutProjectsOwnedInput
  type: WorkspaceType
  workspaces: WorkspaceUpdateManyInput
  template: WorkspaceUpdateOneRequiredInput
}

input ProjectUpdateWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutOwnerDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutParticipantsInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutParticipantsDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutOwnerInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutOwnerDataInput!
  create: ProjectCreateWithoutOwnerInput!
}

input ProjectUpsertWithWhereUniqueWithoutParticipantsInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutParticipantsDataInput!
  create: ProjectCreateWithoutParticipantsInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  owner: UserWhereInput
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  type: WorkspaceType
  type_not: WorkspaceType
  type_in: [WorkspaceType!]
  type_not_in: [WorkspaceType!]
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  template: WorkspaceWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  concept(where: ConceptWhereUniqueInput!): Concept
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!
  conceptLink(where: ConceptLinkWhereUniqueInput!): ConceptLink
  conceptLinks(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink]!
  conceptLinksConnection(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptLinkConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  courseLink(where: CourseLinkWhereUniqueInput!): CourseLink
  courseLinks(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink]!
  courseLinksConnection(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseLinkConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  uRL(where: URLWhereUniqueInput!): URL
  uRLs(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL]!
  uRLsConnection(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): URLConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace]!
  workspacesConnection(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  node(id: ID!): Node
}

type Resource {
  id: ID!
  concept: Concept!
  name: String!
  description: String!
  urls(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL!]
}

type ResourceConnection {
  pageInfo: PageInfo!
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  id: ID
  concept: ConceptCreateOneWithoutResourcesInput!
  name: String!
  description: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateOneWithoutUrlsInput {
  create: ResourceCreateWithoutUrlsInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateWithoutConceptInput {
  id: ID
  name: String!
  description: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateWithoutUrlsInput {
  id: ID
  concept: ConceptCreateOneWithoutResourcesInput!
  name: String!
  description: String!
}

type ResourceEdge {
  node: Resource!
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type ResourcePreviousValues {
  id: ID!
  name: String!
  description: String!
}

input ResourceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ResourceScalarWhereInput!]
  OR: [ResourceScalarWhereInput!]
  NOT: [ResourceScalarWhereInput!]
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
  AND: [ResourceSubscriptionWhereInput!]
  OR: [ResourceSubscriptionWhereInput!]
  NOT: [ResourceSubscriptionWhereInput!]
}

input ResourceUpdateInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  name: String
  description: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateManyDataInput {
  name: String
  description: String
}

input ResourceUpdateManyMutationInput {
  name: String
  description: String
}

input ResourceUpdateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  delete: [ResourceWhereUniqueInput!]
  connect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutConceptInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutConceptInput!]
  deleteMany: [ResourceScalarWhereInput!]
  updateMany: [ResourceUpdateManyWithWhereNestedInput!]
}

input ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput!
  data: ResourceUpdateManyDataInput!
}

input ResourceUpdateOneRequiredWithoutUrlsInput {
  create: ResourceCreateWithoutUrlsInput
  update: ResourceUpdateWithoutUrlsDataInput
  upsert: ResourceUpsertWithoutUrlsInput
  connect: ResourceWhereUniqueInput
}

input ResourceUpdateWithoutConceptDataInput {
  name: String
  description: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutUrlsDataInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  name: String
  description: String
}

input ResourceUpdateWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutConceptDataInput!
}

input ResourceUpsertWithoutUrlsInput {
  update: ResourceUpdateWithoutUrlsDataInput!
  create: ResourceCreateWithoutUrlsInput!
}

input ResourceUpsertWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutConceptDataInput!
  create: ResourceCreateWithoutConceptInput!
}

input ResourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  concept: ConceptWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  urls_every: URLWhereInput
  urls_some: URLWhereInput
  urls_none: URLWhereInput
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
}

input ResourceWhereUniqueInput {
  id: ID
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

type Subscription {
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
  conceptLink(where: ConceptLinkSubscriptionWhereInput): ConceptLinkSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  courseLink(where: CourseLinkSubscriptionWhereInput): CourseLinkSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
  uRL(where: URLSubscriptionWhereInput): URLSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workspace(where: WorkspaceSubscriptionWhereInput): WorkspaceSubscriptionPayload
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}

type URLConnection {
  pageInfo: PageInfo!
  edges: [URLEdge]!
  aggregate: AggregateURL!
}

input URLCreateInput {
  id: ID
  address: String!
  resource: ResourceCreateOneWithoutUrlsInput!
}

input URLCreateManyWithoutResourceInput {
  create: [URLCreateWithoutResourceInput!]
  connect: [URLWhereUniqueInput!]
}

input URLCreateWithoutResourceInput {
  id: ID
  address: String!
}

type URLEdge {
  node: URL!
  cursor: String!
}

enum URLOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
}

type URLPreviousValues {
  id: ID!
  address: String!
}

input URLScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [URLScalarWhereInput!]
  OR: [URLScalarWhereInput!]
  NOT: [URLScalarWhereInput!]
}

type URLSubscriptionPayload {
  mutation: MutationType!
  node: URL
  updatedFields: [String!]
  previousValues: URLPreviousValues
}

input URLSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: URLWhereInput
  AND: [URLSubscriptionWhereInput!]
  OR: [URLSubscriptionWhereInput!]
  NOT: [URLSubscriptionWhereInput!]
}

input URLUpdateInput {
  address: String
  resource: ResourceUpdateOneRequiredWithoutUrlsInput
}

input URLUpdateManyDataInput {
  address: String
}

input URLUpdateManyMutationInput {
  address: String
}

input URLUpdateManyWithoutResourceInput {
  create: [URLCreateWithoutResourceInput!]
  delete: [URLWhereUniqueInput!]
  connect: [URLWhereUniqueInput!]
  set: [URLWhereUniqueInput!]
  disconnect: [URLWhereUniqueInput!]
  update: [URLUpdateWithWhereUniqueWithoutResourceInput!]
  upsert: [URLUpsertWithWhereUniqueWithoutResourceInput!]
  deleteMany: [URLScalarWhereInput!]
  updateMany: [URLUpdateManyWithWhereNestedInput!]
}

input URLUpdateManyWithWhereNestedInput {
  where: URLScalarWhereInput!
  data: URLUpdateManyDataInput!
}

input URLUpdateWithoutResourceDataInput {
  address: String
}

input URLUpdateWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput!
  data: URLUpdateWithoutResourceDataInput!
}

input URLUpsertWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput!
  update: URLUpdateWithoutResourceDataInput!
  create: URLCreateWithoutResourceInput!
}

input URLWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  resource: ResourceWhereInput
  AND: [URLWhereInput!]
  OR: [URLWhereInput!]
  NOT: [URLWhereInput!]
}

input URLWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  tmcId: Int!
  role: Role!
  projectsOwned(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  tmcId: Int!
  role: Role!
  projectsOwned: ProjectCreateManyWithoutOwnerInput
  projects: ProjectCreateManyWithoutParticipantsInput
}

input UserCreateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsOwnedInput {
  create: UserCreateWithoutProjectsOwnedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectsInput {
  id: ID
  tmcId: Int!
  role: Role!
  projectsOwned: ProjectCreateManyWithoutOwnerInput
}

input UserCreateWithoutProjectsOwnedInput {
  id: ID
  tmcId: Int!
  role: Role!
  projects: ProjectCreateManyWithoutParticipantsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  tmcId_ASC
  tmcId_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  tmcId: Int!
  role: Role!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tmcId: Int
  tmcId_not: Int
  tmcId_in: [Int!]
  tmcId_not_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_gt: Int
  tmcId_gte: Int
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  tmcId: Int
  role: Role
  projectsOwned: ProjectUpdateManyWithoutOwnerInput
  projects: ProjectUpdateManyWithoutParticipantsInput
}

input UserUpdateInput {
  tmcId: Int
  role: Role
  projectsOwned: ProjectUpdateManyWithoutOwnerInput
  projects: ProjectUpdateManyWithoutParticipantsInput
}

input UserUpdateManyDataInput {
  tmcId: Int
  role: Role
}

input UserUpdateManyMutationInput {
  tmcId: Int
  role: Role
}

input UserUpdateManyWithoutProjectsInput {
  create: [UserCreateWithoutProjectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProjectsOwnedInput {
  create: UserCreateWithoutProjectsOwnedInput
  update: UserUpdateWithoutProjectsOwnedDataInput
  upsert: UserUpsertWithoutProjectsOwnedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutProjectsDataInput {
  tmcId: Int
  role: Role
  projectsOwned: ProjectUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutProjectsOwnedDataInput {
  tmcId: Int
  role: Role
  projects: ProjectUpdateManyWithoutParticipantsInput
}

input UserUpdateWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutProjectsOwnedInput {
  update: UserUpdateWithoutProjectsOwnedDataInput!
  create: UserCreateWithoutProjectsOwnedInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tmcId: Int
  tmcId_not: Int
  tmcId_in: [Int!]
  tmcId_not_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_gt: Int
  tmcId_gte: Int
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  projectsOwned_every: ProjectWhereInput
  projectsOwned_some: ProjectWhereInput
  projectsOwned_none: ProjectWhereInput
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  tmcId: Int
}

type Workspace {
  id: ID!
  workspace: Workspace!
  user: User!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  conceptLinks(where: ConceptLinkWhereInput, orderBy: ConceptLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptLink!]
  courseLinks(where: CourseLinkWhereInput, orderBy: CourseLinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CourseLink!]
}

type WorkspaceConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]!
  aggregate: AggregateWorkspace!
}

input WorkspaceCreateInput {
  id: ID
  workspace: WorkspaceCreateOneInput!
  user: UserCreateOneInput!
  courses: CourseCreateManyWithoutWorkspacesInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateManyInput {
  create: [WorkspaceCreateInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutConceptLinksInput {
  create: [WorkspaceCreateWithoutConceptLinksInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutConceptsInput {
  create: [WorkspaceCreateWithoutConceptsInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutCourseLinksInput {
  create: [WorkspaceCreateWithoutCourseLinksInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutCoursesInput {
  create: [WorkspaceCreateWithoutCoursesInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateOneInput {
  create: WorkspaceCreateInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateWithoutConceptLinksInput {
  id: ID
  workspace: WorkspaceCreateOneInput!
  user: UserCreateOneInput!
  courses: CourseCreateManyWithoutWorkspacesInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutConceptsInput {
  id: ID
  workspace: WorkspaceCreateOneInput!
  user: UserCreateOneInput!
  courses: CourseCreateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutCourseLinksInput {
  id: ID
  workspace: WorkspaceCreateOneInput!
  user: UserCreateOneInput!
  courses: CourseCreateManyWithoutWorkspacesInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutCoursesInput {
  id: ID
  workspace: WorkspaceCreateOneInput!
  user: UserCreateOneInput!
  concepts: ConceptCreateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkCreateManyWithoutWorkspaceInput
  courseLinks: CourseLinkCreateManyWithoutWorkspaceInput
}

type WorkspaceEdge {
  node: Workspace!
  cursor: String!
}

enum WorkspaceOrderByInput {
  id_ASC
  id_DESC
}

type WorkspacePreviousValues {
  id: ID!
}

input WorkspaceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [WorkspaceScalarWhereInput!]
  OR: [WorkspaceScalarWhereInput!]
  NOT: [WorkspaceScalarWhereInput!]
}

type WorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: Workspace
  updatedFields: [String!]
  previousValues: WorkspacePreviousValues
}

input WorkspaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkspaceWhereInput
  AND: [WorkspaceSubscriptionWhereInput!]
  OR: [WorkspaceSubscriptionWhereInput!]
  NOT: [WorkspaceSubscriptionWhereInput!]
}

enum WorkspaceType {
  STAFF
  STUDENT
}

input WorkspaceUpdateDataInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  courses: CourseUpdateManyWithoutWorkspacesInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  courses: CourseUpdateManyWithoutWorkspacesInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateManyInput {
  create: [WorkspaceCreateInput!]
  update: [WorkspaceUpdateWithWhereUniqueNestedInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueNestedInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
}

input WorkspaceUpdateManyWithoutConceptLinksInput {
  create: [WorkspaceCreateWithoutConceptLinksInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutConceptLinksInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutConceptLinksInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
}

input WorkspaceUpdateManyWithoutConceptsInput {
  create: [WorkspaceCreateWithoutConceptsInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutConceptsInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutConceptsInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
}

input WorkspaceUpdateManyWithoutCourseLinksInput {
  create: [WorkspaceCreateWithoutCourseLinksInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutCourseLinksInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutCourseLinksInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
}

input WorkspaceUpdateManyWithoutCoursesInput {
  create: [WorkspaceCreateWithoutCoursesInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutCoursesInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutCoursesInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
}

input WorkspaceUpdateOneRequiredInput {
  create: WorkspaceCreateInput
  update: WorkspaceUpdateDataInput
  upsert: WorkspaceUpsertNestedInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateWithoutConceptLinksDataInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  courses: CourseUpdateManyWithoutWorkspacesInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutConceptsDataInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  courses: CourseUpdateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutCourseLinksDataInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  courses: CourseUpdateManyWithoutWorkspacesInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutCoursesDataInput {
  workspace: WorkspaceUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  conceptLinks: ConceptLinkUpdateManyWithoutWorkspaceInput
  courseLinks: CourseLinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithWhereUniqueNestedInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutConceptLinksInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutConceptLinksDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutConceptsInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutConceptsDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutCourseLinksInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutCourseLinksDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutCoursesInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutCoursesDataInput!
}

input WorkspaceUpsertNestedInput {
  update: WorkspaceUpdateDataInput!
  create: WorkspaceCreateInput!
}

input WorkspaceUpsertWithWhereUniqueNestedInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateDataInput!
  create: WorkspaceCreateInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutConceptLinksInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutConceptLinksDataInput!
  create: WorkspaceCreateWithoutConceptLinksInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutConceptsInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutConceptsDataInput!
  create: WorkspaceCreateWithoutConceptsInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutCourseLinksInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutCourseLinksDataInput!
  create: WorkspaceCreateWithoutCourseLinksInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutCoursesInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutCoursesDataInput!
  create: WorkspaceCreateWithoutCoursesInput!
}

input WorkspaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  workspace: WorkspaceWhereInput
  user: UserWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  conceptLinks_every: ConceptLinkWhereInput
  conceptLinks_some: ConceptLinkWhereInput
  conceptLinks_none: ConceptLinkWhereInput
  courseLinks_every: CourseLinkWhereInput
  courseLinks_some: CourseLinkWhereInput
  courseLinks_none: CourseLinkWhereInput
  AND: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  NOT: [WorkspaceWhereInput!]
}

input WorkspaceWhereUniqueInput {
  id: ID
}
`
      }
    