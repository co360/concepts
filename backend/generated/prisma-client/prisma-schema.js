module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConcept {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateURL {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkspace {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  linksFromConcept(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  linksToConcept(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  asPrerequisite(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  asLearningObjective(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type ConceptConnection {
  pageInfo: PageInfo!
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateManyWithoutAsLearningObjectiveInput {
  create: [ConceptCreateWithoutAsLearningObjectiveInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutAsPrerequisiteInput {
  create: [ConceptCreateWithoutAsPrerequisiteInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutWorkspacesInput {
  create: [ConceptCreateWithoutWorkspacesInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateWithoutAsLearningObjectiveInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutAsPrerequisiteInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutCoursesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutLinksFromConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutLinksToConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutResourcesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceCreateManyWithoutConceptsInput
}

input ConceptCreateWithoutWorkspacesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
  asPrerequisite: CourseCreateManyWithoutPrerequisitesInput
  asLearningObjective: CourseCreateManyWithoutLearningObjectivesInput
}

type ConceptEdge {
  node: Concept!
  cursor: String!
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  official_ASC
  official_DESC
}

type ConceptPreviousValues {
  id: ID!
  name: String!
  description: String
  official: Boolean!
}

input ConceptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  AND: [ConceptScalarWhereInput!]
  OR: [ConceptScalarWhereInput!]
  NOT: [ConceptScalarWhereInput!]
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
  AND: [ConceptSubscriptionWhereInput!]
  OR: [ConceptSubscriptionWhereInput!]
  NOT: [ConceptSubscriptionWhereInput!]
}

input ConceptUpdateInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateManyDataInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyMutationInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyWithoutAsLearningObjectiveInput {
  create: [ConceptCreateWithoutAsLearningObjectiveInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutAsLearningObjectiveInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutAsLearningObjectiveInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutAsPrerequisiteInput {
  create: [ConceptCreateWithoutAsPrerequisiteInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutAsPrerequisiteInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutAsPrerequisiteInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutCoursesInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutCoursesInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithoutWorkspacesInput {
  create: [ConceptCreateWithoutWorkspacesInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutWorkspacesInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutWorkspacesInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput!
  data: ConceptUpdateManyDataInput!
}

input ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  update: ConceptUpdateWithoutLinksFromConceptDataInput
  upsert: ConceptUpsertWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  update: ConceptUpdateWithoutLinksToConceptDataInput
  upsert: ConceptUpsertWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  update: ConceptUpdateWithoutResourcesDataInput
  upsert: ConceptUpsertWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateWithoutAsLearningObjectiveDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutAsPrerequisiteDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutCoursesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutLinksFromConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutLinksToConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutResourcesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
  workspaces: WorkspaceUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithoutWorkspacesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
  asPrerequisite: CourseUpdateManyWithoutPrerequisitesInput
  asLearningObjective: CourseUpdateManyWithoutLearningObjectivesInput
}

input ConceptUpdateWithWhereUniqueWithoutAsLearningObjectiveInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutAsLearningObjectiveDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutAsPrerequisiteInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutAsPrerequisiteDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutCoursesDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutWorkspacesInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutWorkspacesDataInput!
}

input ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput!
  create: ConceptCreateWithoutLinksFromConceptInput!
}

input ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput!
  create: ConceptCreateWithoutLinksToConceptInput!
}

input ConceptUpsertWithoutResourcesInput {
  update: ConceptUpdateWithoutResourcesDataInput!
  create: ConceptCreateWithoutResourcesInput!
}

input ConceptUpsertWithWhereUniqueWithoutAsLearningObjectiveInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutAsLearningObjectiveDataInput!
  create: ConceptCreateWithoutAsLearningObjectiveInput!
}

input ConceptUpsertWithWhereUniqueWithoutAsPrerequisiteInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutAsPrerequisiteDataInput!
  create: ConceptCreateWithoutAsPrerequisiteInput!
}

input ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutCoursesDataInput!
  create: ConceptCreateWithoutCoursesInput!
}

input ConceptUpsertWithWhereUniqueWithoutWorkspacesInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutWorkspacesDataInput!
  create: ConceptCreateWithoutWorkspacesInput!
}

input ConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  linksFromConcept_every: LinkWhereInput
  linksFromConcept_some: LinkWhereInput
  linksFromConcept_none: LinkWhereInput
  linksToConcept_every: LinkWhereInput
  linksToConcept_some: LinkWhereInput
  linksToConcept_none: LinkWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  resources_every: ResourceWhereInput
  resources_some: ResourceWhereInput
  resources_none: ResourceWhereInput
  asPrerequisite_every: CourseWhereInput
  asPrerequisite_some: CourseWhereInput
  asPrerequisite_none: CourseWhereInput
  asLearningObjective_every: CourseWhereInput
  asLearningObjective_some: CourseWhereInput
  asLearningObjective_none: CourseWhereInput
  workspaces_every: WorkspaceWhereInput
  workspaces_some: WorkspaceWhereInput
  workspaces_none: WorkspaceWhereInput
  AND: [ConceptWhereInput!]
  OR: [ConceptWhereInput!]
  NOT: [ConceptWhereInput!]
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  prerequisites(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  learningObjectives(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  prerequisiteCourses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  workspace: Workspace!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
  prerequisites: ConceptCreateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptCreateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseCreateManyInput
  workspace: WorkspaceCreateOneWithoutCourseInput!
}

input CourseCreateManyInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutLearningObjectivesInput {
  create: [CourseCreateWithoutLearningObjectivesInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutPrerequisitesInput {
  create: [CourseCreateWithoutPrerequisitesInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutWorkspaceInput {
  create: [CourseCreateWithoutWorkspaceInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateWithoutConceptsInput {
  id: ID
  name: String!
  prerequisites: ConceptCreateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptCreateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseCreateManyInput
  workspace: WorkspaceCreateOneWithoutCourseInput!
}

input CourseCreateWithoutLearningObjectivesInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
  prerequisites: ConceptCreateManyWithoutAsPrerequisiteInput
  prerequisiteCourses: CourseCreateManyInput
  workspace: WorkspaceCreateOneWithoutCourseInput!
}

input CourseCreateWithoutPrerequisitesInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
  learningObjectives: ConceptCreateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseCreateManyInput
  workspace: WorkspaceCreateOneWithoutCourseInput!
}

input CourseCreateWithoutWorkspaceInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
  prerequisites: ConceptCreateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptCreateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseCreateManyInput
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  prerequisites: ConceptUpdateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptUpdateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseUpdateManyInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseInput
}

input CourseUpdateInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  prerequisites: ConceptUpdateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptUpdateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseUpdateManyInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseInput
}

input CourseUpdateManyDataInput {
  name: String
}

input CourseUpdateManyInput {
  create: [CourseCreateInput!]
  update: [CourseUpdateWithWhereUniqueNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueNestedInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutConceptsInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutConceptsInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutLearningObjectivesInput {
  create: [CourseCreateWithoutLearningObjectivesInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutLearningObjectivesInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutLearningObjectivesInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutPrerequisitesInput {
  create: [CourseCreateWithoutPrerequisitesInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutPrerequisitesInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutPrerequisitesInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithoutWorkspaceInput {
  create: [CourseCreateWithoutWorkspaceInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateWithoutConceptsDataInput {
  name: String
  prerequisites: ConceptUpdateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptUpdateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseUpdateManyInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseInput
}

input CourseUpdateWithoutLearningObjectivesDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  prerequisites: ConceptUpdateManyWithoutAsPrerequisiteInput
  prerequisiteCourses: CourseUpdateManyInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseInput
}

input CourseUpdateWithoutPrerequisitesDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  learningObjectives: ConceptUpdateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseUpdateManyInput
  workspace: WorkspaceUpdateOneRequiredWithoutCourseInput
}

input CourseUpdateWithoutWorkspaceDataInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
  prerequisites: ConceptUpdateManyWithoutAsPrerequisiteInput
  learningObjectives: ConceptUpdateManyWithoutAsLearningObjectiveInput
  prerequisiteCourses: CourseUpdateManyInput
}

input CourseUpdateWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateDataInput!
}

input CourseUpdateWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutConceptsDataInput!
}

input CourseUpdateWithWhereUniqueWithoutLearningObjectivesInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutLearningObjectivesDataInput!
}

input CourseUpdateWithWhereUniqueWithoutPrerequisitesInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutPrerequisitesDataInput!
}

input CourseUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutWorkspaceDataInput!
}

input CourseUpsertWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutConceptsDataInput!
  create: CourseCreateWithoutConceptsInput!
}

input CourseUpsertWithWhereUniqueWithoutLearningObjectivesInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutLearningObjectivesDataInput!
  create: CourseCreateWithoutLearningObjectivesInput!
}

input CourseUpsertWithWhereUniqueWithoutPrerequisitesInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutPrerequisitesDataInput!
  create: CourseCreateWithoutPrerequisitesInput!
}

input CourseUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutWorkspaceDataInput!
  create: CourseCreateWithoutWorkspaceInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  prerequisites_every: ConceptWhereInput
  prerequisites_some: ConceptWhereInput
  prerequisites_none: ConceptWhereInput
  learningObjectives_every: ConceptWhereInput
  learningObjectives_some: ConceptWhereInput
  learningObjectives_none: ConceptWhereInput
  prerequisiteCourses_every: CourseWhereInput
  prerequisiteCourses_some: CourseWhereInput
  prerequisiteCourses_none: CourseWhereInput
  workspace: WorkspaceWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
  workspace(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutLinksInput
}

input LinkCreateManyWithoutFromInput {
  create: [LinkCreateWithoutFromInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateManyWithoutToInput {
  create: [LinkCreateWithoutToInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateManyWithoutWorkspaceInput {
  create: [LinkCreateWithoutWorkspaceInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateWithoutFromInput {
  id: ID
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutLinksInput
}

input LinkCreateWithoutToInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  official: Boolean
  workspace: WorkspaceCreateManyWithoutLinksInput
}

input LinkCreateWithoutWorkspaceInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
}

type LinkPreviousValues {
  id: ID!
  official: Boolean!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutLinksInput
}

input LinkUpdateManyDataInput {
  official: Boolean
}

input LinkUpdateManyMutationInput {
  official: Boolean
}

input LinkUpdateManyWithoutFromInput {
  create: [LinkCreateWithoutFromInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithoutToInput {
  create: [LinkCreateWithoutToInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutToInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithoutWorkspaceInput {
  create: [LinkCreateWithoutWorkspaceInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutWorkspaceInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutWorkspaceInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithoutFromDataInput {
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutLinksInput
}

input LinkUpdateWithoutToDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
  workspace: WorkspaceUpdateManyWithoutLinksInput
}

input LinkUpdateWithoutWorkspaceDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
}

input LinkUpdateWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutFromDataInput!
}

input LinkUpdateWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutToDataInput!
}

input LinkUpdateWithWhereUniqueWithoutWorkspaceInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutWorkspaceDataInput!
}

input LinkUpsertWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutFromDataInput!
  create: LinkCreateWithoutFromInput!
}

input LinkUpsertWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutToDataInput!
  create: LinkCreateWithoutToInput!
}

input LinkUpsertWithWhereUniqueWithoutWorkspaceInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutWorkspaceDataInput!
  create: LinkCreateWithoutWorkspaceInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: ConceptWhereInput
  to: ConceptWhereInput
  official: Boolean
  official_not: Boolean
  workspace_every: WorkspaceWhereInput
  workspace_some: WorkspaceWhereInput
  workspace_none: WorkspaceWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createConcept(data: ConceptCreateInput!): Concept!
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createResource(data: ResourceCreateInput!): Resource!
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateManyResources(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): BatchPayload!
  upsertResource(where: ResourceWhereUniqueInput!, create: ResourceCreateInput!, update: ResourceUpdateInput!): Resource!
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
  createURL(data: URLCreateInput!): URL!
  updateURL(data: URLUpdateInput!, where: URLWhereUniqueInput!): URL
  updateManyURLs(data: URLUpdateManyMutationInput!, where: URLWhereInput): BatchPayload!
  upsertURL(where: URLWhereUniqueInput!, create: URLCreateInput!, update: URLUpdateInput!): URL!
  deleteURL(where: URLWhereUniqueInput!): URL
  deleteManyURLs(where: URLWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorkspace(data: WorkspaceCreateInput!): Workspace!
  updateWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  updateManyWorkspaces(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): BatchPayload!
  upsertWorkspace(where: WorkspaceWhereUniqueInput!, create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!): Workspace!
  deleteWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  deleteManyWorkspaces(where: WorkspaceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  concept(where: ConceptWhereUniqueInput!): Concept
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  uRL(where: URLWhereUniqueInput!): URL
  uRLs(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL]!
  uRLsConnection(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): URLConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace]!
  workspacesConnection(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkspaceConnection!
  node(id: ID!): Node
}

type Resource {
  id: ID!
  concept: Concept!
  name: String!
  description: String!
  urls(where: URLWhereInput, orderBy: URLOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [URL!]
}

type ResourceConnection {
  pageInfo: PageInfo!
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  id: ID
  concept: ConceptCreateOneWithoutResourcesInput!
  name: String!
  description: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateOneWithoutUrlsInput {
  create: ResourceCreateWithoutUrlsInput
  connect: ResourceWhereUniqueInput
}

input ResourceCreateWithoutConceptInput {
  id: ID
  name: String!
  description: String!
  urls: URLCreateManyWithoutResourceInput
}

input ResourceCreateWithoutUrlsInput {
  id: ID
  concept: ConceptCreateOneWithoutResourcesInput!
  name: String!
  description: String!
}

type ResourceEdge {
  node: Resource!
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type ResourcePreviousValues {
  id: ID!
  name: String!
  description: String!
}

input ResourceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ResourceScalarWhereInput!]
  OR: [ResourceScalarWhereInput!]
  NOT: [ResourceScalarWhereInput!]
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
  AND: [ResourceSubscriptionWhereInput!]
  OR: [ResourceSubscriptionWhereInput!]
  NOT: [ResourceSubscriptionWhereInput!]
}

input ResourceUpdateInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  name: String
  description: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateManyDataInput {
  name: String
  description: String
}

input ResourceUpdateManyMutationInput {
  name: String
  description: String
}

input ResourceUpdateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  delete: [ResourceWhereUniqueInput!]
  connect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutConceptInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutConceptInput!]
  deleteMany: [ResourceScalarWhereInput!]
  updateMany: [ResourceUpdateManyWithWhereNestedInput!]
}

input ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput!
  data: ResourceUpdateManyDataInput!
}

input ResourceUpdateOneRequiredWithoutUrlsInput {
  create: ResourceCreateWithoutUrlsInput
  update: ResourceUpdateWithoutUrlsDataInput
  upsert: ResourceUpsertWithoutUrlsInput
  connect: ResourceWhereUniqueInput
}

input ResourceUpdateWithoutConceptDataInput {
  name: String
  description: String
  urls: URLUpdateManyWithoutResourceInput
}

input ResourceUpdateWithoutUrlsDataInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  name: String
  description: String
}

input ResourceUpdateWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutConceptDataInput!
}

input ResourceUpsertWithoutUrlsInput {
  update: ResourceUpdateWithoutUrlsDataInput!
  create: ResourceCreateWithoutUrlsInput!
}

input ResourceUpsertWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutConceptDataInput!
  create: ResourceCreateWithoutConceptInput!
}

input ResourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  concept: ConceptWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  urls_every: URLWhereInput
  urls_some: URLWhereInput
  urls_none: URLWhereInput
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
}

input ResourceWhereUniqueInput {
  id: ID
}

enum Role {
  GUEST
  STUDENT
  STAFF
  ADMIN
}

type Subscription {
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
  uRL(where: URLSubscriptionWhereInput): URLSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workspace(where: WorkspaceSubscriptionWhereInput): WorkspaceSubscriptionPayload
}

type URL {
  id: ID!
  address: String!
  resource: Resource!
}

type URLConnection {
  pageInfo: PageInfo!
  edges: [URLEdge]!
  aggregate: AggregateURL!
}

input URLCreateInput {
  id: ID
  address: String!
  resource: ResourceCreateOneWithoutUrlsInput!
}

input URLCreateManyWithoutResourceInput {
  create: [URLCreateWithoutResourceInput!]
  connect: [URLWhereUniqueInput!]
}

input URLCreateWithoutResourceInput {
  id: ID
  address: String!
}

type URLEdge {
  node: URL!
  cursor: String!
}

enum URLOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
}

type URLPreviousValues {
  id: ID!
  address: String!
}

input URLScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  AND: [URLScalarWhereInput!]
  OR: [URLScalarWhereInput!]
  NOT: [URLScalarWhereInput!]
}

type URLSubscriptionPayload {
  mutation: MutationType!
  node: URL
  updatedFields: [String!]
  previousValues: URLPreviousValues
}

input URLSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: URLWhereInput
  AND: [URLSubscriptionWhereInput!]
  OR: [URLSubscriptionWhereInput!]
  NOT: [URLSubscriptionWhereInput!]
}

input URLUpdateInput {
  address: String
  resource: ResourceUpdateOneRequiredWithoutUrlsInput
}

input URLUpdateManyDataInput {
  address: String
}

input URLUpdateManyMutationInput {
  address: String
}

input URLUpdateManyWithoutResourceInput {
  create: [URLCreateWithoutResourceInput!]
  delete: [URLWhereUniqueInput!]
  connect: [URLWhereUniqueInput!]
  set: [URLWhereUniqueInput!]
  disconnect: [URLWhereUniqueInput!]
  update: [URLUpdateWithWhereUniqueWithoutResourceInput!]
  upsert: [URLUpsertWithWhereUniqueWithoutResourceInput!]
  deleteMany: [URLScalarWhereInput!]
  updateMany: [URLUpdateManyWithWhereNestedInput!]
}

input URLUpdateManyWithWhereNestedInput {
  where: URLScalarWhereInput!
  data: URLUpdateManyDataInput!
}

input URLUpdateWithoutResourceDataInput {
  address: String
}

input URLUpdateWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput!
  data: URLUpdateWithoutResourceDataInput!
}

input URLUpsertWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput!
  update: URLUpdateWithoutResourceDataInput!
  create: URLCreateWithoutResourceInput!
}

input URLWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  resource: ResourceWhereInput
  AND: [URLWhereInput!]
  OR: [URLWhereInput!]
  NOT: [URLWhereInput!]
}

input URLWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  tmcId: Int!
  role: Role!
  workspaceOwned(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  workspacesParticipated(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  tmcId: Int!
  role: Role!
  workspaceOwned: WorkspaceCreateManyWithoutOwnerInput
  workspacesParticipated: WorkspaceCreateManyWithoutParticipantsInput
}

input UserCreateManyWithoutWorkspacesParticipatedInput {
  create: [UserCreateWithoutWorkspacesParticipatedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutWorkspaceOwnedInput {
  create: UserCreateWithoutWorkspaceOwnedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWorkspaceOwnedInput {
  id: ID
  tmcId: Int!
  role: Role!
  workspacesParticipated: WorkspaceCreateManyWithoutParticipantsInput
}

input UserCreateWithoutWorkspacesParticipatedInput {
  id: ID
  tmcId: Int!
  role: Role!
  workspaceOwned: WorkspaceCreateManyWithoutOwnerInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  tmcId_ASC
  tmcId_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  tmcId: Int!
  role: Role!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tmcId: Int
  tmcId_not: Int
  tmcId_in: [Int!]
  tmcId_not_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_gt: Int
  tmcId_gte: Int
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  tmcId: Int
  role: Role
  workspaceOwned: WorkspaceUpdateManyWithoutOwnerInput
  workspacesParticipated: WorkspaceUpdateManyWithoutParticipantsInput
}

input UserUpdateManyDataInput {
  tmcId: Int
  role: Role
}

input UserUpdateManyMutationInput {
  tmcId: Int
  role: Role
}

input UserUpdateManyWithoutWorkspacesParticipatedInput {
  create: [UserCreateWithoutWorkspacesParticipatedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutWorkspacesParticipatedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutWorkspacesParticipatedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutWorkspaceOwnedInput {
  create: UserCreateWithoutWorkspaceOwnedInput
  update: UserUpdateWithoutWorkspaceOwnedDataInput
  upsert: UserUpsertWithoutWorkspaceOwnedInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutWorkspaceOwnedDataInput {
  tmcId: Int
  role: Role
  workspacesParticipated: WorkspaceUpdateManyWithoutParticipantsInput
}

input UserUpdateWithoutWorkspacesParticipatedDataInput {
  tmcId: Int
  role: Role
  workspaceOwned: WorkspaceUpdateManyWithoutOwnerInput
}

input UserUpdateWithWhereUniqueWithoutWorkspacesParticipatedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutWorkspacesParticipatedDataInput!
}

input UserUpsertWithoutWorkspaceOwnedInput {
  update: UserUpdateWithoutWorkspaceOwnedDataInput!
  create: UserCreateWithoutWorkspaceOwnedInput!
}

input UserUpsertWithWhereUniqueWithoutWorkspacesParticipatedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutWorkspacesParticipatedDataInput!
  create: UserCreateWithoutWorkspacesParticipatedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  tmcId: Int
  tmcId_not: Int
  tmcId_in: [Int!]
  tmcId_not_in: [Int!]
  tmcId_lt: Int
  tmcId_lte: Int
  tmcId_gt: Int
  tmcId_gte: Int
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  workspaceOwned_every: WorkspaceWhereInput
  workspaceOwned_some: WorkspaceWhereInput
  workspaceOwned_none: WorkspaceWhereInput
  workspacesParticipated_every: WorkspaceWhereInput
  workspacesParticipated_some: WorkspaceWhereInput
  workspacesParticipated_none: WorkspaceWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  tmcId: Int
}

type Workspace {
  id: ID!
  name: String!
  owner: User!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  course(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
  subWorkspaces(where: WorkspaceWhereInput, orderBy: WorkspaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workspace!]
  type: WorkspaceType!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
}

type WorkspaceConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]!
  aggregate: AggregateWorkspace!
}

input WorkspaceCreateInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  course: CourseCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateManyWithoutConceptsInput {
  create: [WorkspaceCreateWithoutConceptsInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutLinksInput {
  create: [WorkspaceCreateWithoutLinksInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutOwnerInput {
  create: [WorkspaceCreateWithoutOwnerInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutParticipantsInput {
  create: [WorkspaceCreateWithoutParticipantsInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateManyWithoutSubWorkspacesInput {
  create: [WorkspaceCreateWithoutSubWorkspacesInput!]
  connect: [WorkspaceWhereUniqueInput!]
}

input WorkspaceCreateOneWithoutCourseInput {
  create: WorkspaceCreateWithoutCourseInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceCreateWithoutConceptsInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  course: CourseCreateManyWithoutWorkspaceInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutCourseInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutLinksInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  course: CourseCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
}

input WorkspaceCreateWithoutOwnerInput {
  id: ID
  name: String!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  course: CourseCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutParticipantsInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  course: CourseCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceCreateManyWithoutSubWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

input WorkspaceCreateWithoutSubWorkspacesInput {
  id: ID
  name: String!
  owner: UserCreateOneWithoutWorkspaceOwnedInput!
  participants: UserCreateManyWithoutWorkspacesParticipatedInput
  course: CourseCreateManyWithoutWorkspaceInput
  concepts: ConceptCreateManyWithoutWorkspacesInput
  type: WorkspaceType!
  links: LinkCreateManyWithoutWorkspaceInput
}

type WorkspaceEdge {
  node: Workspace!
  cursor: String!
}

enum WorkspaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
}

type WorkspacePreviousValues {
  id: ID!
  name: String!
  type: WorkspaceType!
}

input WorkspaceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: WorkspaceType
  type_not: WorkspaceType
  type_in: [WorkspaceType!]
  type_not_in: [WorkspaceType!]
  AND: [WorkspaceScalarWhereInput!]
  OR: [WorkspaceScalarWhereInput!]
  NOT: [WorkspaceScalarWhereInput!]
}

type WorkspaceSubscriptionPayload {
  mutation: MutationType!
  node: Workspace
  updatedFields: [String!]
  previousValues: WorkspacePreviousValues
}

input WorkspaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkspaceWhereInput
  AND: [WorkspaceSubscriptionWhereInput!]
  OR: [WorkspaceSubscriptionWhereInput!]
  NOT: [WorkspaceSubscriptionWhereInput!]
}

enum WorkspaceType {
  STAFF
  STUDENT
}

input WorkspaceUpdateInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateManyDataInput {
  name: String
  type: WorkspaceType
}

input WorkspaceUpdateManyMutationInput {
  name: String
  type: WorkspaceType
}

input WorkspaceUpdateManyWithoutConceptsInput {
  create: [WorkspaceCreateWithoutConceptsInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutConceptsInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutConceptsInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutLinksInput {
  create: [WorkspaceCreateWithoutLinksInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutLinksInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutLinksInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutOwnerInput {
  create: [WorkspaceCreateWithoutOwnerInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutParticipantsInput {
  create: [WorkspaceCreateWithoutParticipantsInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithoutSubWorkspacesInput {
  create: [WorkspaceCreateWithoutSubWorkspacesInput!]
  delete: [WorkspaceWhereUniqueInput!]
  connect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutSubWorkspacesInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutSubWorkspacesInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  updateMany: [WorkspaceUpdateManyWithWhereNestedInput!]
}

input WorkspaceUpdateManyWithWhereNestedInput {
  where: WorkspaceScalarWhereInput!
  data: WorkspaceUpdateManyDataInput!
}

input WorkspaceUpdateOneRequiredWithoutCourseInput {
  create: WorkspaceCreateWithoutCourseInput
  update: WorkspaceUpdateWithoutCourseDataInput
  upsert: WorkspaceUpsertWithoutCourseInput
  connect: WorkspaceWhereUniqueInput
}

input WorkspaceUpdateWithoutConceptsDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutCourseDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutLinksDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
}

input WorkspaceUpdateWithoutOwnerDataInput {
  name: String
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutParticipantsDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  subWorkspaces: WorkspaceUpdateManyWithoutSubWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithoutSubWorkspacesDataInput {
  name: String
  owner: UserUpdateOneRequiredWithoutWorkspaceOwnedInput
  participants: UserUpdateManyWithoutWorkspacesParticipatedInput
  course: CourseUpdateManyWithoutWorkspaceInput
  concepts: ConceptUpdateManyWithoutWorkspacesInput
  type: WorkspaceType
  links: LinkUpdateManyWithoutWorkspaceInput
}

input WorkspaceUpdateWithWhereUniqueWithoutConceptsInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutConceptsDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutLinksInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutLinksDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutOwnerInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutOwnerDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutParticipantsInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutParticipantsDataInput!
}

input WorkspaceUpdateWithWhereUniqueWithoutSubWorkspacesInput {
  where: WorkspaceWhereUniqueInput!
  data: WorkspaceUpdateWithoutSubWorkspacesDataInput!
}

input WorkspaceUpsertWithoutCourseInput {
  update: WorkspaceUpdateWithoutCourseDataInput!
  create: WorkspaceCreateWithoutCourseInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutConceptsInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutConceptsDataInput!
  create: WorkspaceCreateWithoutConceptsInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutLinksInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutLinksDataInput!
  create: WorkspaceCreateWithoutLinksInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutOwnerInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutOwnerDataInput!
  create: WorkspaceCreateWithoutOwnerInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutParticipantsInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutParticipantsDataInput!
  create: WorkspaceCreateWithoutParticipantsInput!
}

input WorkspaceUpsertWithWhereUniqueWithoutSubWorkspacesInput {
  where: WorkspaceWhereUniqueInput!
  update: WorkspaceUpdateWithoutSubWorkspacesDataInput!
  create: WorkspaceCreateWithoutSubWorkspacesInput!
}

input WorkspaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  owner: UserWhereInput
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  course_every: CourseWhereInput
  course_some: CourseWhereInput
  course_none: CourseWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  subWorkspaces_every: WorkspaceWhereInput
  subWorkspaces_some: WorkspaceWhereInput
  subWorkspaces_none: WorkspaceWhereInput
  type: WorkspaceType
  type_not: WorkspaceType
  type_in: [WorkspaceType!]
  type_not_in: [WorkspaceType!]
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  AND: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  NOT: [WorkspaceWhereInput!]
}

input WorkspaceWhereUniqueInput {
  id: ID
}
`
      }
    