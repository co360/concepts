module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConcept {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Concept {
  id: ID!
  name: String!
  description: String
  official: Boolean!
  linksFromConcept(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  linksToConcept(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
}

type ConceptConnection {
  pageInfo: PageInfo!
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
}

input ConceptCreateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateOneWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateWithoutCoursesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  resources: ResourceCreateManyWithoutConceptInput
}

input ConceptCreateWithoutLinksFromConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
}

input ConceptCreateWithoutLinksToConceptInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  courses: CourseCreateManyWithoutConceptsInput
  resources: ResourceCreateManyWithoutConceptInput
}

input ConceptCreateWithoutResourcesInput {
  id: ID
  name: String!
  description: String
  official: Boolean
  linksFromConcept: LinkCreateManyWithoutFromInput
  linksToConcept: LinkCreateManyWithoutToInput
  courses: CourseCreateManyWithoutConceptsInput
}

type ConceptEdge {
  node: Concept!
  cursor: String!
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  official_ASC
  official_DESC
}

type ConceptPreviousValues {
  id: ID!
  name: String!
  description: String
  official: Boolean!
}

input ConceptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  AND: [ConceptScalarWhereInput!]
  OR: [ConceptScalarWhereInput!]
  NOT: [ConceptScalarWhereInput!]
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
  AND: [ConceptSubscriptionWhereInput!]
  OR: [ConceptSubscriptionWhereInput!]
  NOT: [ConceptSubscriptionWhereInput!]
}

input ConceptUpdateInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateManyDataInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyMutationInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyWithoutCoursesInput {
  create: [ConceptCreateWithoutCoursesInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutCoursesInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutCoursesInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput!
  data: ConceptUpdateManyDataInput!
}

input ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create: ConceptCreateWithoutLinksFromConceptInput
  update: ConceptUpdateWithoutLinksFromConceptDataInput
  upsert: ConceptUpsertWithoutLinksFromConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create: ConceptCreateWithoutLinksToConceptInput
  update: ConceptUpdateWithoutLinksToConceptDataInput
  upsert: ConceptUpsertWithoutLinksToConceptInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateOneRequiredWithoutResourcesInput {
  create: ConceptCreateWithoutResourcesInput
  update: ConceptUpdateWithoutResourcesDataInput
  upsert: ConceptUpsertWithoutResourcesInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateWithoutCoursesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateWithoutLinksFromConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateWithoutLinksToConceptDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  courses: CourseUpdateManyWithoutConceptsInput
  resources: ResourceUpdateManyWithoutConceptInput
}

input ConceptUpdateWithoutResourcesDataInput {
  name: String
  description: String
  official: Boolean
  linksFromConcept: LinkUpdateManyWithoutFromInput
  linksToConcept: LinkUpdateManyWithoutToInput
  courses: CourseUpdateManyWithoutConceptsInput
}

input ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutCoursesDataInput!
}

input ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput!
  create: ConceptCreateWithoutLinksFromConceptInput!
}

input ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput!
  create: ConceptCreateWithoutLinksToConceptInput!
}

input ConceptUpsertWithoutResourcesInput {
  update: ConceptUpdateWithoutResourcesDataInput!
  create: ConceptCreateWithoutResourcesInput!
}

input ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutCoursesDataInput!
  create: ConceptCreateWithoutCoursesInput!
}

input ConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  linksFromConcept_every: LinkWhereInput
  linksFromConcept_some: LinkWhereInput
  linksFromConcept_none: LinkWhereInput
  linksToConcept_every: LinkWhereInput
  linksToConcept_some: LinkWhereInput
  linksToConcept_none: LinkWhereInput
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  resources_every: ResourceWhereInput
  resources_some: ResourceWhereInput
  resources_none: ResourceWhereInput
  AND: [ConceptWhereInput!]
  OR: [ConceptWhereInput!]
  NOT: [ConceptWhereInput!]
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  concepts: ConceptCreateManyWithoutCoursesInput
}

input CourseCreateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateWithoutConceptsInput {
  id: ID
  name: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  name: String
  concepts: ConceptUpdateManyWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  name: String
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateManyWithoutConceptsInput {
  create: [CourseCreateWithoutConceptsInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutConceptsInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutConceptsInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateWithoutConceptsDataInput {
  name: String
}

input CourseUpdateWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutConceptsDataInput!
}

input CourseUpsertWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutConceptsDataInput!
  create: CourseCreateWithoutConceptsInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  from: Concept!
  to: Concept!
  official: Boolean!
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
}

input LinkCreateManyWithoutFromInput {
  create: [LinkCreateWithoutFromInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateManyWithoutToInput {
  create: [LinkCreateWithoutToInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateWithoutFromInput {
  id: ID
  to: ConceptCreateOneWithoutLinksToConceptInput!
  official: Boolean
}

input LinkCreateWithoutToInput {
  id: ID
  from: ConceptCreateOneWithoutLinksFromConceptInput!
  official: Boolean
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
}

type LinkPreviousValues {
  id: ID!
  official: Boolean!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  official: Boolean
  official_not: Boolean
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
}

input LinkUpdateManyDataInput {
  official: Boolean
}

input LinkUpdateManyMutationInput {
  official: Boolean
}

input LinkUpdateManyWithoutFromInput {
  create: [LinkCreateWithoutFromInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutFromInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithoutToInput {
  create: [LinkCreateWithoutToInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutToInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutToInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateWithoutFromDataInput {
  to: ConceptUpdateOneRequiredWithoutLinksToConceptInput
  official: Boolean
}

input LinkUpdateWithoutToDataInput {
  from: ConceptUpdateOneRequiredWithoutLinksFromConceptInput
  official: Boolean
}

input LinkUpdateWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutFromDataInput!
}

input LinkUpdateWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutToDataInput!
}

input LinkUpsertWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutFromDataInput!
  create: LinkCreateWithoutFromInput!
}

input LinkUpsertWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutToDataInput!
  create: LinkCreateWithoutToInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: ConceptWhereInput
  to: ConceptWhereInput
  official: Boolean
  official_not: Boolean
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createConcept(data: ConceptCreateInput!): Concept!
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createResource(data: ResourceCreateInput!): Resource!
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateManyResources(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): BatchPayload!
  upsertResource(where: ResourceWhereUniqueInput!, create: ResourceCreateInput!, update: ResourceUpdateInput!): Resource!
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  concept(where: ConceptWhereUniqueInput!): Concept
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  resource(where: ResourceWhereUniqueInput!): Resource
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  node(id: ID!): Node
}

type Resource {
  id: ID!
  concept: Concept!
  name: String!
  description: String!
}

type ResourceConnection {
  pageInfo: PageInfo!
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  id: ID
  concept: ConceptCreateOneWithoutResourcesInput!
  name: String!
  description: String!
}

input ResourceCreateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateWithoutConceptInput {
  id: ID
  name: String!
  description: String!
}

type ResourceEdge {
  node: Resource!
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type ResourcePreviousValues {
  id: ID!
  name: String!
  description: String!
}

input ResourceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ResourceScalarWhereInput!]
  OR: [ResourceScalarWhereInput!]
  NOT: [ResourceScalarWhereInput!]
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
  AND: [ResourceSubscriptionWhereInput!]
  OR: [ResourceSubscriptionWhereInput!]
  NOT: [ResourceSubscriptionWhereInput!]
}

input ResourceUpdateInput {
  concept: ConceptUpdateOneRequiredWithoutResourcesInput
  name: String
  description: String
}

input ResourceUpdateManyDataInput {
  name: String
  description: String
}

input ResourceUpdateManyMutationInput {
  name: String
  description: String
}

input ResourceUpdateManyWithoutConceptInput {
  create: [ResourceCreateWithoutConceptInput!]
  delete: [ResourceWhereUniqueInput!]
  connect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutConceptInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutConceptInput!]
  deleteMany: [ResourceScalarWhereInput!]
  updateMany: [ResourceUpdateManyWithWhereNestedInput!]
}

input ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput!
  data: ResourceUpdateManyDataInput!
}

input ResourceUpdateWithoutConceptDataInput {
  name: String
  description: String
}

input ResourceUpdateWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutConceptDataInput!
}

input ResourceUpsertWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutConceptDataInput!
  create: ResourceCreateWithoutConceptInput!
}

input ResourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  concept: ConceptWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
}

input ResourceWhereUniqueInput {
  id: ID
}

type Subscription {
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
}
`
      }
    