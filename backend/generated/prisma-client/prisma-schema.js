module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConcept {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateInstance {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Concept {
  id: ID!
  name: String!
  description: String!
  user: User!
  official: Boolean!
}

type ConceptConnection {
  pageInfo: PageInfo!
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  id: ID
  name: String!
  description: String!
  user: UserCreateOneWithoutConceptsInput!
  official: Boolean
}

input ConceptCreateManyInput {
  create: [ConceptCreateInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateManyWithoutUserInput {
  create: [ConceptCreateWithoutUserInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneInput {
  create: ConceptCreateInput
  connect: ConceptWhereUniqueInput
}

input ConceptCreateWithoutUserInput {
  id: ID
  name: String!
  description: String!
  official: Boolean
}

type ConceptEdge {
  node: Concept!
  cursor: String!
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  official_ASC
  official_DESC
}

type ConceptPreviousValues {
  id: ID!
  name: String!
  description: String!
  official: Boolean!
}

input ConceptScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  official: Boolean
  official_not: Boolean
  AND: [ConceptScalarWhereInput!]
  OR: [ConceptScalarWhereInput!]
  NOT: [ConceptScalarWhereInput!]
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
  AND: [ConceptSubscriptionWhereInput!]
  OR: [ConceptSubscriptionWhereInput!]
  NOT: [ConceptSubscriptionWhereInput!]
}

input ConceptUpdateDataInput {
  name: String
  description: String
  user: UserUpdateOneRequiredWithoutConceptsInput
  official: Boolean
}

input ConceptUpdateInput {
  name: String
  description: String
  user: UserUpdateOneRequiredWithoutConceptsInput
  official: Boolean
}

input ConceptUpdateManyDataInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyInput {
  create: [ConceptCreateInput!]
  update: [ConceptUpdateWithWhereUniqueNestedInput!]
  upsert: [ConceptUpsertWithWhereUniqueNestedInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyMutationInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateManyWithoutUserInput {
  create: [ConceptCreateWithoutUserInput!]
  delete: [ConceptWhereUniqueInput!]
  connect: [ConceptWhereUniqueInput!]
  set: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConceptUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ConceptScalarWhereInput!]
  updateMany: [ConceptUpdateManyWithWhereNestedInput!]
}

input ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput!
  data: ConceptUpdateManyDataInput!
}

input ConceptUpdateOneRequiredInput {
  create: ConceptCreateInput
  update: ConceptUpdateDataInput
  upsert: ConceptUpsertNestedInput
  connect: ConceptWhereUniqueInput
}

input ConceptUpdateWithoutUserDataInput {
  name: String
  description: String
  official: Boolean
}

input ConceptUpdateWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateDataInput!
}

input ConceptUpdateWithWhereUniqueWithoutUserInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateWithoutUserDataInput!
}

input ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptUpsertWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptUpsertWithWhereUniqueWithoutUserInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateWithoutUserDataInput!
  create: ConceptCreateWithoutUserInput!
}

input ConceptWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  user: UserWhereInput
  official: Boolean
  official_not: Boolean
  AND: [ConceptWhereInput!]
  OR: [ConceptWhereInput!]
  NOT: [ConceptWhereInput!]
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  name: String!
  instances(where: InstanceWhereInput, orderBy: InstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instance!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  name: String!
  instances: InstanceCreateManyWithoutCourseInput
}

input CourseCreateOneWithoutInstancesInput {
  create: CourseCreateWithoutInstancesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutInstancesInput {
  id: ID
  name: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CoursePreviousValues {
  id: ID!
  name: String!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  name: String
  instances: InstanceUpdateManyWithoutCourseInput
}

input CourseUpdateManyMutationInput {
  name: String
}

input CourseUpdateOneRequiredWithoutInstancesInput {
  create: CourseCreateWithoutInstancesInput
  update: CourseUpdateWithoutInstancesDataInput
  upsert: CourseUpsertWithoutInstancesInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutInstancesDataInput {
  name: String
}

input CourseUpsertWithoutInstancesInput {
  update: CourseUpdateWithoutInstancesDataInput!
  create: CourseCreateWithoutInstancesInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  instances_every: InstanceWhereInput
  instances_some: InstanceWhereInput
  instances_none: InstanceWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Instance {
  id: ID!
  start_date: DateTime!
  end_date: DateTime!
  periods: [Int!]!
  course: Course!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
}

type InstanceConnection {
  pageInfo: PageInfo!
  edges: [InstanceEdge]!
  aggregate: AggregateInstance!
}

input InstanceCreateInput {
  id: ID
  start_date: DateTime!
  end_date: DateTime!
  periods: InstanceCreateperiodsInput
  course: CourseCreateOneWithoutInstancesInput!
  concepts: ConceptCreateManyInput
}

input InstanceCreateManyWithoutCourseInput {
  create: [InstanceCreateWithoutCourseInput!]
  connect: [InstanceWhereUniqueInput!]
}

input InstanceCreateperiodsInput {
  set: [Int!]
}

input InstanceCreateWithoutCourseInput {
  id: ID
  start_date: DateTime!
  end_date: DateTime!
  periods: InstanceCreateperiodsInput
  concepts: ConceptCreateManyInput
}

type InstanceEdge {
  node: Instance!
  cursor: String!
}

enum InstanceOrderByInput {
  id_ASC
  id_DESC
  start_date_ASC
  start_date_DESC
  end_date_ASC
  end_date_DESC
}

type InstancePreviousValues {
  id: ID!
  start_date: DateTime!
  end_date: DateTime!
  periods: [Int!]!
}

input InstanceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  AND: [InstanceScalarWhereInput!]
  OR: [InstanceScalarWhereInput!]
  NOT: [InstanceScalarWhereInput!]
}

type InstanceSubscriptionPayload {
  mutation: MutationType!
  node: Instance
  updatedFields: [String!]
  previousValues: InstancePreviousValues
}

input InstanceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InstanceWhereInput
  AND: [InstanceSubscriptionWhereInput!]
  OR: [InstanceSubscriptionWhereInput!]
  NOT: [InstanceSubscriptionWhereInput!]
}

input InstanceUpdateInput {
  start_date: DateTime
  end_date: DateTime
  periods: InstanceUpdateperiodsInput
  course: CourseUpdateOneRequiredWithoutInstancesInput
  concepts: ConceptUpdateManyInput
}

input InstanceUpdateManyDataInput {
  start_date: DateTime
  end_date: DateTime
  periods: InstanceUpdateperiodsInput
}

input InstanceUpdateManyMutationInput {
  start_date: DateTime
  end_date: DateTime
  periods: InstanceUpdateperiodsInput
}

input InstanceUpdateManyWithoutCourseInput {
  create: [InstanceCreateWithoutCourseInput!]
  delete: [InstanceWhereUniqueInput!]
  connect: [InstanceWhereUniqueInput!]
  set: [InstanceWhereUniqueInput!]
  disconnect: [InstanceWhereUniqueInput!]
  update: [InstanceUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [InstanceUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [InstanceScalarWhereInput!]
  updateMany: [InstanceUpdateManyWithWhereNestedInput!]
}

input InstanceUpdateManyWithWhereNestedInput {
  where: InstanceScalarWhereInput!
  data: InstanceUpdateManyDataInput!
}

input InstanceUpdateperiodsInput {
  set: [Int!]
}

input InstanceUpdateWithoutCourseDataInput {
  start_date: DateTime
  end_date: DateTime
  periods: InstanceUpdateperiodsInput
  concepts: ConceptUpdateManyInput
}

input InstanceUpdateWithWhereUniqueWithoutCourseInput {
  where: InstanceWhereUniqueInput!
  data: InstanceUpdateWithoutCourseDataInput!
}

input InstanceUpsertWithWhereUniqueWithoutCourseInput {
  where: InstanceWhereUniqueInput!
  update: InstanceUpdateWithoutCourseDataInput!
  create: InstanceCreateWithoutCourseInput!
}

input InstanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  course: CourseWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  AND: [InstanceWhereInput!]
  OR: [InstanceWhereInput!]
  NOT: [InstanceWhereInput!]
}

input InstanceWhereUniqueInput {
  id: ID
}

type Link {
  id: ID!
  from: Concept!
  to: Concept!
  user: User!
  official: Boolean!
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  from: ConceptCreateOneInput!
  to: ConceptCreateOneInput!
  user: UserCreateOneInput!
  official: Boolean
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  official_ASC
  official_DESC
}

type LinkPreviousValues {
  id: ID!
  official: Boolean!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  from: ConceptUpdateOneRequiredInput
  to: ConceptUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  official: Boolean
}

input LinkUpdateManyMutationInput {
  official: Boolean
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  from: ConceptWhereInput
  to: ConceptWhereInput
  user: UserWhereInput
  official: Boolean
  official_not: Boolean
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createConcept(data: ConceptCreateInput!): Concept!
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  updateManyConcepts(data: ConceptUpdateManyMutationInput!, where: ConceptWhereInput): BatchPayload!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createInstance(data: InstanceCreateInput!): Instance!
  updateInstance(data: InstanceUpdateInput!, where: InstanceWhereUniqueInput!): Instance
  updateManyInstances(data: InstanceUpdateManyMutationInput!, where: InstanceWhereInput): BatchPayload!
  upsertInstance(where: InstanceWhereUniqueInput!, create: InstanceCreateInput!, update: InstanceUpdateInput!): Instance!
  deleteInstance(where: InstanceWhereUniqueInput!): Instance
  deleteManyInstances(where: InstanceWhereInput): BatchPayload!
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  concept(where: ConceptWhereUniqueInput!): Concept
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  instance(where: InstanceWhereUniqueInput!): Instance
  instances(where: InstanceWhereInput, orderBy: InstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instance]!
  instancesConnection(where: InstanceWhereInput, orderBy: InstanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstanceConnection!
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  instance(where: InstanceSubscriptionWhereInput): InstanceSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  concepts: ConceptCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConceptsInput {
  create: UserCreateWithoutConceptsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutConceptsInput {
  id: ID
  username: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  username: String
  concepts: ConceptUpdateManyWithoutUserInput
}

input UserUpdateInput {
  username: String
  concepts: ConceptUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConceptsInput {
  create: UserCreateWithoutConceptsInput
  update: UserUpdateWithoutConceptsDataInput
  upsert: UserUpsertWithoutConceptsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutConceptsDataInput {
  username: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutConceptsInput {
  update: UserUpdateWithoutConceptsDataInput!
  create: UserCreateWithoutConceptsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    