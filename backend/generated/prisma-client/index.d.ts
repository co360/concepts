// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  concept: (where?: ConceptWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  resource: (where?: ResourceWhereInput) => Promise<boolean>;
  uRL: (where?: URLWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  concept: (where: ConceptWhereUniqueInput) => ConceptNullablePromise;
  concepts: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Concept>;
  conceptsConnection: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConceptConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  resource: (where: ResourceWhereUniqueInput) => ResourceNullablePromise;
  resources: (args?: {
    where?: ResourceWhereInput;
    orderBy?: ResourceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Resource>;
  resourcesConnection: (args?: {
    where?: ResourceWhereInput;
    orderBy?: ResourceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResourceConnectionPromise;
  uRL: (where: URLWhereUniqueInput) => URLNullablePromise;
  uRLs: (args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<URL>;
  uRLsConnection: (args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => URLConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConcept: (data: ConceptCreateInput) => ConceptPromise;
  updateConcept: (args: {
    data: ConceptUpdateInput;
    where: ConceptWhereUniqueInput;
  }) => ConceptPromise;
  updateManyConcepts: (args: {
    data: ConceptUpdateManyMutationInput;
    where?: ConceptWhereInput;
  }) => BatchPayloadPromise;
  upsertConcept: (args: {
    where: ConceptWhereUniqueInput;
    create: ConceptCreateInput;
    update: ConceptUpdateInput;
  }) => ConceptPromise;
  deleteConcept: (where: ConceptWhereUniqueInput) => ConceptPromise;
  deleteManyConcepts: (where?: ConceptWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createResource: (data: ResourceCreateInput) => ResourcePromise;
  updateResource: (args: {
    data: ResourceUpdateInput;
    where: ResourceWhereUniqueInput;
  }) => ResourcePromise;
  updateManyResources: (args: {
    data: ResourceUpdateManyMutationInput;
    where?: ResourceWhereInput;
  }) => BatchPayloadPromise;
  upsertResource: (args: {
    where: ResourceWhereUniqueInput;
    create: ResourceCreateInput;
    update: ResourceUpdateInput;
  }) => ResourcePromise;
  deleteResource: (where: ResourceWhereUniqueInput) => ResourcePromise;
  deleteManyResources: (where?: ResourceWhereInput) => BatchPayloadPromise;
  createURL: (data: URLCreateInput) => URLPromise;
  updateURL: (args: {
    data: URLUpdateInput;
    where: URLWhereUniqueInput;
  }) => URLPromise;
  updateManyURLs: (args: {
    data: URLUpdateManyMutationInput;
    where?: URLWhereInput;
  }) => BatchPayloadPromise;
  upsertURL: (args: {
    where: URLWhereUniqueInput;
    create: URLCreateInput;
    update: URLUpdateInput;
  }) => URLPromise;
  deleteURL: (where: URLWhereUniqueInput) => URLPromise;
  deleteManyURLs: (where?: URLWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  concept: (
    where?: ConceptSubscriptionWhereInput
  ) => ConceptSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  resource: (
    where?: ResourceSubscriptionWhereInput
  ) => ResourceSubscriptionPayloadSubscription;
  uRL: (
    where?: URLSubscriptionWhereInput
  ) => URLSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "official_ASC"
  | "official_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type ConceptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "official_ASC"
  | "official_DESC";

export type ResourceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type URLOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConceptWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<ConceptWhereInput>;
  to?: Maybe<ConceptWhereInput>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export interface ConceptWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  linksFromConcept_every?: Maybe<LinkWhereInput>;
  linksFromConcept_some?: Maybe<LinkWhereInput>;
  linksFromConcept_none?: Maybe<LinkWhereInput>;
  linksToConcept_every?: Maybe<LinkWhereInput>;
  linksToConcept_some?: Maybe<LinkWhereInput>;
  linksToConcept_none?: Maybe<LinkWhereInput>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  resources_every?: Maybe<ResourceWhereInput>;
  resources_some?: Maybe<ResourceWhereInput>;
  resources_none?: Maybe<ResourceWhereInput>;
  AND?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  OR?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  NOT?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  concepts_every?: Maybe<ConceptWhereInput>;
  concepts_some?: Maybe<ConceptWhereInput>;
  concepts_none?: Maybe<ConceptWhereInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface ResourceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  concept?: Maybe<ConceptWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  urls_every?: Maybe<URLWhereInput>;
  urls_some?: Maybe<URLWhereInput>;
  urls_none?: Maybe<URLWhereInput>;
  AND?: Maybe<ResourceWhereInput[] | ResourceWhereInput>;
  OR?: Maybe<ResourceWhereInput[] | ResourceWhereInput>;
  NOT?: Maybe<ResourceWhereInput[] | ResourceWhereInput>;
}

export interface URLWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  resource?: Maybe<ResourceWhereInput>;
  AND?: Maybe<URLWhereInput[] | URLWhereInput>;
  OR?: Maybe<URLWhereInput[] | URLWhereInput>;
  NOT?: Maybe<URLWhereInput[] | URLWhereInput>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ResourceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type URLWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConceptCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkCreateManyWithoutToInput>;
  courses?: Maybe<CourseCreateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceCreateManyWithoutConceptInput>;
}

export interface LinkCreateManyWithoutFromInput {
  create?: Maybe<LinkCreateWithoutFromInput[] | LinkCreateWithoutFromInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutFromInput {
  id?: Maybe<ID_Input>;
  to: ConceptCreateOneWithoutLinksToConceptInput;
  official?: Maybe<Boolean>;
}

export interface ConceptCreateOneWithoutLinksToConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksToConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutLinksToConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkCreateManyWithoutFromInput>;
  courses?: Maybe<CourseCreateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceCreateManyWithoutConceptInput>;
}

export interface CourseCreateManyWithoutConceptsInput {
  create?: Maybe<
    CourseCreateWithoutConceptsInput[] | CourseCreateWithoutConceptsInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutConceptsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ResourceCreateManyWithoutConceptInput {
  create?: Maybe<
    ResourceCreateWithoutConceptInput[] | ResourceCreateWithoutConceptInput
  >;
  connect?: Maybe<ResourceWhereUniqueInput[] | ResourceWhereUniqueInput>;
}

export interface ResourceCreateWithoutConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  urls?: Maybe<URLCreateManyWithoutResourceInput>;
}

export interface URLCreateManyWithoutResourceInput {
  create?: Maybe<
    URLCreateWithoutResourceInput[] | URLCreateWithoutResourceInput
  >;
  connect?: Maybe<URLWhereUniqueInput[] | URLWhereUniqueInput>;
}

export interface URLCreateWithoutResourceInput {
  id?: Maybe<ID_Input>;
  address: String;
}

export interface LinkCreateManyWithoutToInput {
  create?: Maybe<LinkCreateWithoutToInput[] | LinkCreateWithoutToInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
}

export interface LinkCreateWithoutToInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneWithoutLinksFromConceptInput;
  official?: Maybe<Boolean>;
}

export interface ConceptCreateOneWithoutLinksFromConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksFromConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutLinksFromConceptInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksToConcept?: Maybe<LinkCreateManyWithoutToInput>;
  courses?: Maybe<CourseCreateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceCreateManyWithoutConceptInput>;
}

export interface ConceptUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkUpdateManyWithoutToInput>;
  courses?: Maybe<CourseUpdateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceUpdateManyWithoutConceptInput>;
}

export interface LinkUpdateManyWithoutFromInput {
  create?: Maybe<LinkCreateWithoutFromInput[] | LinkCreateWithoutFromInput>;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutFromInput[]
    | LinkUpdateWithWhereUniqueWithoutFromInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutFromInput[]
    | LinkUpsertWithWhereUniqueWithoutFromInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutFromDataInput;
}

export interface LinkUpdateWithoutFromDataInput {
  to?: Maybe<ConceptUpdateOneRequiredWithoutLinksToConceptInput>;
  official?: Maybe<Boolean>;
}

export interface ConceptUpdateOneRequiredWithoutLinksToConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksToConceptInput>;
  update?: Maybe<ConceptUpdateWithoutLinksToConceptDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutLinksToConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutLinksToConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkUpdateManyWithoutFromInput>;
  courses?: Maybe<CourseUpdateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceUpdateManyWithoutConceptInput>;
}

export interface CourseUpdateManyWithoutConceptsInput {
  create?: Maybe<
    CourseCreateWithoutConceptsInput[] | CourseCreateWithoutConceptsInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutConceptsInput[]
    | CourseUpdateWithWhereUniqueWithoutConceptsInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutConceptsInput[]
    | CourseUpsertWithWhereUniqueWithoutConceptsInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutConceptsDataInput;
}

export interface CourseUpdateWithoutConceptsDataInput {
  name?: Maybe<String>;
}

export interface CourseUpsertWithWhereUniqueWithoutConceptsInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutConceptsDataInput;
  create: CourseCreateWithoutConceptsInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface CourseUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ResourceUpdateManyWithoutConceptInput {
  create?: Maybe<
    ResourceCreateWithoutConceptInput[] | ResourceCreateWithoutConceptInput
  >;
  delete?: Maybe<ResourceWhereUniqueInput[] | ResourceWhereUniqueInput>;
  connect?: Maybe<ResourceWhereUniqueInput[] | ResourceWhereUniqueInput>;
  set?: Maybe<ResourceWhereUniqueInput[] | ResourceWhereUniqueInput>;
  disconnect?: Maybe<ResourceWhereUniqueInput[] | ResourceWhereUniqueInput>;
  update?: Maybe<
    | ResourceUpdateWithWhereUniqueWithoutConceptInput[]
    | ResourceUpdateWithWhereUniqueWithoutConceptInput
  >;
  upsert?: Maybe<
    | ResourceUpsertWithWhereUniqueWithoutConceptInput[]
    | ResourceUpsertWithWhereUniqueWithoutConceptInput
  >;
  deleteMany?: Maybe<ResourceScalarWhereInput[] | ResourceScalarWhereInput>;
  updateMany?: Maybe<
    | ResourceUpdateManyWithWhereNestedInput[]
    | ResourceUpdateManyWithWhereNestedInput
  >;
}

export interface ResourceUpdateWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutConceptDataInput;
}

export interface ResourceUpdateWithoutConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  urls?: Maybe<URLUpdateManyWithoutResourceInput>;
}

export interface URLUpdateManyWithoutResourceInput {
  create?: Maybe<
    URLCreateWithoutResourceInput[] | URLCreateWithoutResourceInput
  >;
  delete?: Maybe<URLWhereUniqueInput[] | URLWhereUniqueInput>;
  connect?: Maybe<URLWhereUniqueInput[] | URLWhereUniqueInput>;
  set?: Maybe<URLWhereUniqueInput[] | URLWhereUniqueInput>;
  disconnect?: Maybe<URLWhereUniqueInput[] | URLWhereUniqueInput>;
  update?: Maybe<
    | URLUpdateWithWhereUniqueWithoutResourceInput[]
    | URLUpdateWithWhereUniqueWithoutResourceInput
  >;
  upsert?: Maybe<
    | URLUpsertWithWhereUniqueWithoutResourceInput[]
    | URLUpsertWithWhereUniqueWithoutResourceInput
  >;
  deleteMany?: Maybe<URLScalarWhereInput[] | URLScalarWhereInput>;
  updateMany?: Maybe<
    URLUpdateManyWithWhereNestedInput[] | URLUpdateManyWithWhereNestedInput
  >;
}

export interface URLUpdateWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput;
  data: URLUpdateWithoutResourceDataInput;
}

export interface URLUpdateWithoutResourceDataInput {
  address?: Maybe<String>;
}

export interface URLUpsertWithWhereUniqueWithoutResourceInput {
  where: URLWhereUniqueInput;
  update: URLUpdateWithoutResourceDataInput;
  create: URLCreateWithoutResourceInput;
}

export interface URLScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  AND?: Maybe<URLScalarWhereInput[] | URLScalarWhereInput>;
  OR?: Maybe<URLScalarWhereInput[] | URLScalarWhereInput>;
  NOT?: Maybe<URLScalarWhereInput[] | URLScalarWhereInput>;
}

export interface URLUpdateManyWithWhereNestedInput {
  where: URLScalarWhereInput;
  data: URLUpdateManyDataInput;
}

export interface URLUpdateManyDataInput {
  address?: Maybe<String>;
}

export interface ResourceUpsertWithWhereUniqueWithoutConceptInput {
  where: ResourceWhereUniqueInput;
  update: ResourceUpdateWithoutConceptDataInput;
  create: ResourceCreateWithoutConceptInput;
}

export interface ResourceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<ResourceScalarWhereInput[] | ResourceScalarWhereInput>;
  OR?: Maybe<ResourceScalarWhereInput[] | ResourceScalarWhereInput>;
  NOT?: Maybe<ResourceScalarWhereInput[] | ResourceScalarWhereInput>;
}

export interface ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput;
  data: ResourceUpdateManyDataInput;
}

export interface ResourceUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ConceptUpsertWithoutLinksToConceptInput {
  update: ConceptUpdateWithoutLinksToConceptDataInput;
  create: ConceptCreateWithoutLinksToConceptInput;
}

export interface LinkUpsertWithWhereUniqueWithoutFromInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutFromDataInput;
  create: LinkCreateWithoutFromInput;
}

export interface LinkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  OR?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  NOT?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  official?: Maybe<Boolean>;
}

export interface LinkUpdateManyWithoutToInput {
  create?: Maybe<LinkCreateWithoutToInput[] | LinkCreateWithoutToInput>;
  delete?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  connect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  set?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  disconnect?: Maybe<LinkWhereUniqueInput[] | LinkWhereUniqueInput>;
  update?: Maybe<
    | LinkUpdateWithWhereUniqueWithoutToInput[]
    | LinkUpdateWithWhereUniqueWithoutToInput
  >;
  upsert?: Maybe<
    | LinkUpsertWithWhereUniqueWithoutToInput[]
    | LinkUpsertWithWhereUniqueWithoutToInput
  >;
  deleteMany?: Maybe<LinkScalarWhereInput[] | LinkScalarWhereInput>;
  updateMany?: Maybe<
    LinkUpdateManyWithWhereNestedInput[] | LinkUpdateManyWithWhereNestedInput
  >;
}

export interface LinkUpdateWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutToDataInput;
}

export interface LinkUpdateWithoutToDataInput {
  from?: Maybe<ConceptUpdateOneRequiredWithoutLinksFromConceptInput>;
  official?: Maybe<Boolean>;
}

export interface ConceptUpdateOneRequiredWithoutLinksFromConceptInput {
  create?: Maybe<ConceptCreateWithoutLinksFromConceptInput>;
  update?: Maybe<ConceptUpdateWithoutLinksFromConceptDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutLinksFromConceptInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutLinksFromConceptDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksToConcept?: Maybe<LinkUpdateManyWithoutToInput>;
  courses?: Maybe<CourseUpdateManyWithoutConceptsInput>;
  resources?: Maybe<ResourceUpdateManyWithoutConceptInput>;
}

export interface ConceptUpsertWithoutLinksFromConceptInput {
  update: ConceptUpdateWithoutLinksFromConceptDataInput;
  create: ConceptCreateWithoutLinksFromConceptInput;
}

export interface LinkUpsertWithWhereUniqueWithoutToInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutToDataInput;
  create: LinkCreateWithoutToInput;
}

export interface ConceptUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  concepts?: Maybe<ConceptCreateManyWithoutCoursesInput>;
}

export interface ConceptCreateManyWithoutCoursesInput {
  create?: Maybe<
    ConceptCreateWithoutCoursesInput[] | ConceptCreateWithoutCoursesInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkCreateManyWithoutToInput>;
  resources?: Maybe<ResourceCreateManyWithoutConceptInput>;
}

export interface CourseUpdateInput {
  name?: Maybe<String>;
  concepts?: Maybe<ConceptUpdateManyWithoutCoursesInput>;
}

export interface ConceptUpdateManyWithoutCoursesInput {
  create?: Maybe<
    ConceptCreateWithoutCoursesInput[] | ConceptCreateWithoutCoursesInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutCoursesInput[]
    | ConceptUpdateWithWhereUniqueWithoutCoursesInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutCoursesInput[]
    | ConceptUpsertWithWhereUniqueWithoutCoursesInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutCoursesDataInput;
}

export interface ConceptUpdateWithoutCoursesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkUpdateManyWithoutToInput>;
  resources?: Maybe<ResourceUpdateManyWithoutConceptInput>;
}

export interface ConceptUpsertWithWhereUniqueWithoutCoursesInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutCoursesDataInput;
  create: ConceptCreateWithoutCoursesInput;
}

export interface ConceptScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  OR?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  NOT?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
}

export interface ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput;
  data: ConceptUpdateManyDataInput;
}

export interface ConceptUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
}

export interface CourseUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneWithoutLinksFromConceptInput;
  to: ConceptCreateOneWithoutLinksToConceptInput;
  official?: Maybe<Boolean>;
}

export interface LinkUpdateInput {
  from?: Maybe<ConceptUpdateOneRequiredWithoutLinksFromConceptInput>;
  to?: Maybe<ConceptUpdateOneRequiredWithoutLinksToConceptInput>;
  official?: Maybe<Boolean>;
}

export interface LinkUpdateManyMutationInput {
  official?: Maybe<Boolean>;
}

export interface ResourceCreateInput {
  id?: Maybe<ID_Input>;
  concept: ConceptCreateOneWithoutResourcesInput;
  name: String;
  description: String;
  urls?: Maybe<URLCreateManyWithoutResourceInput>;
}

export interface ConceptCreateOneWithoutResourcesInput {
  create?: Maybe<ConceptCreateWithoutResourcesInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutResourcesInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkCreateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkCreateManyWithoutToInput>;
  courses?: Maybe<CourseCreateManyWithoutConceptsInput>;
}

export interface ResourceUpdateInput {
  concept?: Maybe<ConceptUpdateOneRequiredWithoutResourcesInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  urls?: Maybe<URLUpdateManyWithoutResourceInput>;
}

export interface ConceptUpdateOneRequiredWithoutResourcesInput {
  create?: Maybe<ConceptCreateWithoutResourcesInput>;
  update?: Maybe<ConceptUpdateWithoutResourcesDataInput>;
  upsert?: Maybe<ConceptUpsertWithoutResourcesInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpdateWithoutResourcesDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
  linksFromConcept?: Maybe<LinkUpdateManyWithoutFromInput>;
  linksToConcept?: Maybe<LinkUpdateManyWithoutToInput>;
  courses?: Maybe<CourseUpdateManyWithoutConceptsInput>;
}

export interface ConceptUpsertWithoutResourcesInput {
  update: ConceptUpdateWithoutResourcesDataInput;
  create: ConceptCreateWithoutResourcesInput;
}

export interface ResourceUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface URLCreateInput {
  id?: Maybe<ID_Input>;
  address: String;
  resource: ResourceCreateOneWithoutUrlsInput;
}

export interface ResourceCreateOneWithoutUrlsInput {
  create?: Maybe<ResourceCreateWithoutUrlsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateWithoutUrlsInput {
  id?: Maybe<ID_Input>;
  concept: ConceptCreateOneWithoutResourcesInput;
  name: String;
  description: String;
}

export interface URLUpdateInput {
  address?: Maybe<String>;
  resource?: Maybe<ResourceUpdateOneRequiredWithoutUrlsInput>;
}

export interface ResourceUpdateOneRequiredWithoutUrlsInput {
  create?: Maybe<ResourceCreateWithoutUrlsInput>;
  update?: Maybe<ResourceUpdateWithoutUrlsDataInput>;
  upsert?: Maybe<ResourceUpsertWithoutUrlsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceUpdateWithoutUrlsDataInput {
  concept?: Maybe<ConceptUpdateOneRequiredWithoutResourcesInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ResourceUpsertWithoutUrlsInput {
  update: ResourceUpdateWithoutUrlsDataInput;
  create: ResourceCreateWithoutUrlsInput;
}

export interface URLUpdateManyMutationInput {
  address?: Maybe<String>;
}

export interface ConceptSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConceptWhereInput>;
  AND?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  OR?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  NOT?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface ResourceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResourceWhereInput>;
  AND?: Maybe<
    ResourceSubscriptionWhereInput[] | ResourceSubscriptionWhereInput
  >;
  OR?: Maybe<ResourceSubscriptionWhereInput[] | ResourceSubscriptionWhereInput>;
  NOT?: Maybe<
    ResourceSubscriptionWhereInput[] | ResourceSubscriptionWhereInput
  >;
}

export interface URLSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<URLWhereInput>;
  AND?: Maybe<URLSubscriptionWhereInput[] | URLSubscriptionWhereInput>;
  OR?: Maybe<URLSubscriptionWhereInput[] | URLSubscriptionWhereInput>;
  NOT?: Maybe<URLSubscriptionWhereInput[] | URLSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Concept {
  id: ID_Output;
  name: String;
  description?: String;
  official: Boolean;
}

export interface ConceptPromise extends Promise<Concept>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  official: () => Promise<Boolean>;
  linksFromConcept: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resources: <T = FragmentableArray<Resource>>(args?: {
    where?: ResourceWhereInput;
    orderBy?: ResourceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConceptSubscription
  extends Promise<AsyncIterator<Concept>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
  linksFromConcept: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = Promise<AsyncIterator<LinkSubscription>>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resources: <T = Promise<AsyncIterator<ResourceSubscription>>>(args?: {
    where?: ResourceWhereInput;
    orderBy?: ResourceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConceptNullablePromise
  extends Promise<Concept | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  official: () => Promise<Boolean>;
  linksFromConcept: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  linksToConcept: <T = FragmentableArray<Link>>(args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resources: <T = FragmentableArray<Resource>>(args?: {
    where?: ResourceWhereInput;
    orderBy?: ResourceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Link {
  id: ID_Output;
  official: Boolean;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = ConceptSubscription>() => T;
  to: <T = ConceptSubscription>() => T;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface Course {
  id: ID_Output;
  name: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Resource {
  id: ID_Output;
  name: String;
  description: String;
}

export interface ResourcePromise extends Promise<Resource>, Fragmentable {
  id: () => Promise<ID_Output>;
  concept: <T = ConceptPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  urls: <T = FragmentableArray<URL>>(args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResourceSubscription
  extends Promise<AsyncIterator<Resource>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  concept: <T = ConceptSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  urls: <T = Promise<AsyncIterator<URLSubscription>>>(args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ResourceNullablePromise
  extends Promise<Resource | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  concept: <T = ConceptPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  urls: <T = FragmentableArray<URL>>(args?: {
    where?: URLWhereInput;
    orderBy?: URLOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface URL {
  id: ID_Output;
  address: String;
}

export interface URLPromise extends Promise<URL>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  resource: <T = ResourcePromise>() => T;
}

export interface URLSubscription
  extends Promise<AsyncIterator<URL>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  resource: <T = ResourceSubscription>() => T;
}

export interface URLNullablePromise extends Promise<URL | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  resource: <T = ResourcePromise>() => T;
}

export interface ConceptConnection {
  pageInfo: PageInfo;
  edges: ConceptEdge[];
}

export interface ConceptConnectionPromise
  extends Promise<ConceptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConceptEdge>>() => T;
  aggregate: <T = AggregateConceptPromise>() => T;
}

export interface ConceptConnectionSubscription
  extends Promise<AsyncIterator<ConceptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConceptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConceptSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConceptEdge {
  node: Concept;
  cursor: String;
}

export interface ConceptEdgePromise extends Promise<ConceptEdge>, Fragmentable {
  node: <T = ConceptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConceptEdgeSubscription
  extends Promise<AsyncIterator<ConceptEdge>>,
    Fragmentable {
  node: <T = ConceptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConcept {
  count: Int;
}

export interface AggregateConceptPromise
  extends Promise<AggregateConcept>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConceptSubscription
  extends Promise<AsyncIterator<AggregateConcept>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResourceConnection {
  pageInfo: PageInfo;
  edges: ResourceEdge[];
}

export interface ResourceConnectionPromise
  extends Promise<ResourceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResourceEdge>>() => T;
  aggregate: <T = AggregateResourcePromise>() => T;
}

export interface ResourceConnectionSubscription
  extends Promise<AsyncIterator<ResourceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResourceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResourceSubscription>() => T;
}

export interface ResourceEdge {
  node: Resource;
  cursor: String;
}

export interface ResourceEdgePromise
  extends Promise<ResourceEdge>,
    Fragmentable {
  node: <T = ResourcePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResourceEdgeSubscription
  extends Promise<AsyncIterator<ResourceEdge>>,
    Fragmentable {
  node: <T = ResourceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResource {
  count: Int;
}

export interface AggregateResourcePromise
  extends Promise<AggregateResource>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResourceSubscription
  extends Promise<AsyncIterator<AggregateResource>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface URLConnection {
  pageInfo: PageInfo;
  edges: URLEdge[];
}

export interface URLConnectionPromise
  extends Promise<URLConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<URLEdge>>() => T;
  aggregate: <T = AggregateURLPromise>() => T;
}

export interface URLConnectionSubscription
  extends Promise<AsyncIterator<URLConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<URLEdgeSubscription>>>() => T;
  aggregate: <T = AggregateURLSubscription>() => T;
}

export interface URLEdge {
  node: URL;
  cursor: String;
}

export interface URLEdgePromise extends Promise<URLEdge>, Fragmentable {
  node: <T = URLPromise>() => T;
  cursor: () => Promise<String>;
}

export interface URLEdgeSubscription
  extends Promise<AsyncIterator<URLEdge>>,
    Fragmentable {
  node: <T = URLSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateURL {
  count: Int;
}

export interface AggregateURLPromise
  extends Promise<AggregateURL>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateURLSubscription
  extends Promise<AsyncIterator<AggregateURL>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConceptSubscriptionPayload {
  mutation: MutationType;
  node: Concept;
  updatedFields: String[];
  previousValues: ConceptPreviousValues;
}

export interface ConceptSubscriptionPayloadPromise
  extends Promise<ConceptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConceptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConceptPreviousValuesPromise>() => T;
}

export interface ConceptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConceptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConceptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConceptPreviousValuesSubscription>() => T;
}

export interface ConceptPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  official: Boolean;
}

export interface ConceptPreviousValuesPromise
  extends Promise<ConceptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  official: () => Promise<Boolean>;
}

export interface ConceptPreviousValuesSubscription
  extends Promise<AsyncIterator<ConceptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  name: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  official: Boolean;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  official: () => Promise<Boolean>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface ResourceSubscriptionPayload {
  mutation: MutationType;
  node: Resource;
  updatedFields: String[];
  previousValues: ResourcePreviousValues;
}

export interface ResourceSubscriptionPayloadPromise
  extends Promise<ResourceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResourcePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResourcePreviousValuesPromise>() => T;
}

export interface ResourceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResourceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResourceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResourcePreviousValuesSubscription>() => T;
}

export interface ResourcePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface ResourcePreviousValuesPromise
  extends Promise<ResourcePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ResourcePreviousValuesSubscription
  extends Promise<AsyncIterator<ResourcePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface URLSubscriptionPayload {
  mutation: MutationType;
  node: URL;
  updatedFields: String[];
  previousValues: URLPreviousValues;
}

export interface URLSubscriptionPayloadPromise
  extends Promise<URLSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = URLPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = URLPreviousValuesPromise>() => T;
}

export interface URLSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<URLSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = URLSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = URLPreviousValuesSubscription>() => T;
}

export interface URLPreviousValues {
  id: ID_Output;
  address: String;
}

export interface URLPreviousValuesPromise
  extends Promise<URLPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
}

export interface URLPreviousValuesSubscription
  extends Promise<AsyncIterator<URLPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Concept",
    embedded: false
  },
  {
    name: "Resource",
    embedded: false
  },
  {
    name: "URL",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
