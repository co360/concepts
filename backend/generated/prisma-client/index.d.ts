// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  concept: (where?: ConceptWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  instance: (where?: InstanceWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  concept: (where: ConceptWhereUniqueInput) => ConceptNullablePromise;
  concepts: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Concept>;
  conceptsConnection: (args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConceptConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  instance: (where: InstanceWhereUniqueInput) => InstanceNullablePromise;
  instances: (args?: {
    where?: InstanceWhereInput;
    orderBy?: InstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Instance>;
  instancesConnection: (args?: {
    where?: InstanceWhereInput;
    orderBy?: InstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InstanceConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkNullablePromise;
  links: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Link>;
  linksConnection: (args?: {
    where?: LinkWhereInput;
    orderBy?: LinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LinkConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConcept: (data: ConceptCreateInput) => ConceptPromise;
  updateConcept: (args: {
    data: ConceptUpdateInput;
    where: ConceptWhereUniqueInput;
  }) => ConceptPromise;
  updateManyConcepts: (args: {
    data: ConceptUpdateManyMutationInput;
    where?: ConceptWhereInput;
  }) => BatchPayloadPromise;
  upsertConcept: (args: {
    where: ConceptWhereUniqueInput;
    create: ConceptCreateInput;
    update: ConceptUpdateInput;
  }) => ConceptPromise;
  deleteConcept: (where: ConceptWhereUniqueInput) => ConceptPromise;
  deleteManyConcepts: (where?: ConceptWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createInstance: (data: InstanceCreateInput) => InstancePromise;
  updateInstance: (args: {
    data: InstanceUpdateInput;
    where: InstanceWhereUniqueInput;
  }) => InstancePromise;
  updateManyInstances: (args: {
    data: InstanceUpdateManyMutationInput;
    where?: InstanceWhereInput;
  }) => BatchPayloadPromise;
  upsertInstance: (args: {
    where: InstanceWhereUniqueInput;
    create: InstanceCreateInput;
    update: InstanceUpdateInput;
  }) => InstancePromise;
  deleteInstance: (where: InstanceWhereUniqueInput) => InstancePromise;
  deleteManyInstances: (where?: InstanceWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (args: {
    data: LinkUpdateInput;
    where: LinkWhereUniqueInput;
  }) => LinkPromise;
  updateManyLinks: (args: {
    data: LinkUpdateManyMutationInput;
    where?: LinkWhereInput;
  }) => BatchPayloadPromise;
  upsertLink: (args: {
    where: LinkWhereUniqueInput;
    create: LinkCreateInput;
    update: LinkUpdateInput;
  }) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  concept: (
    where?: ConceptSubscriptionWhereInput
  ) => ConceptSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  instance: (
    where?: InstanceSubscriptionWhereInput
  ) => InstanceSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ConceptOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "official_ASC"
  | "official_DESC";

export type InstanceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "start_date_ASC"
  | "start_date_DESC"
  | "end_date_ASC"
  | "end_date_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "official_ASC"
  | "official_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConceptWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConceptWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  OR?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
  NOT?: Maybe<ConceptWhereInput[] | ConceptWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  concepts_every?: Maybe<ConceptWhereInput>;
  concepts_some?: Maybe<ConceptWhereInput>;
  concepts_none?: Maybe<ConceptWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InstanceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start_date?: Maybe<DateTimeInput>;
  start_date_not?: Maybe<DateTimeInput>;
  start_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_lt?: Maybe<DateTimeInput>;
  start_date_lte?: Maybe<DateTimeInput>;
  start_date_gt?: Maybe<DateTimeInput>;
  start_date_gte?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  end_date_not?: Maybe<DateTimeInput>;
  end_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_lt?: Maybe<DateTimeInput>;
  end_date_lte?: Maybe<DateTimeInput>;
  end_date_gt?: Maybe<DateTimeInput>;
  end_date_gte?: Maybe<DateTimeInput>;
  course?: Maybe<CourseWhereInput>;
  concepts_every?: Maybe<ConceptWhereInput>;
  concepts_some?: Maybe<ConceptWhereInput>;
  concepts_none?: Maybe<ConceptWhereInput>;
  AND?: Maybe<InstanceWhereInput[] | InstanceWhereInput>;
  OR?: Maybe<InstanceWhereInput[] | InstanceWhereInput>;
  NOT?: Maybe<InstanceWhereInput[] | InstanceWhereInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  instances_every?: Maybe<InstanceWhereInput>;
  instances_some?: Maybe<InstanceWhereInput>;
  instances_none?: Maybe<InstanceWhereInput>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export type InstanceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<ConceptWhereInput>;
  to?: Maybe<ConceptWhereInput>;
  user?: Maybe<UserWhereInput>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  OR?: Maybe<LinkWhereInput[] | LinkWhereInput>;
  NOT?: Maybe<LinkWhereInput[] | LinkWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConceptCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  user: UserCreateOneWithoutConceptsInput;
  official?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutConceptsInput {
  create?: Maybe<UserCreateWithoutConceptsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutConceptsInput {
  id?: Maybe<ID_Input>;
  username: String;
}

export interface ConceptUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutConceptsInput>;
  official?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutConceptsInput {
  create?: Maybe<UserCreateWithoutConceptsInput>;
  update?: Maybe<UserUpdateWithoutConceptsDataInput>;
  upsert?: Maybe<UserUpsertWithoutConceptsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutConceptsDataInput {
  username?: Maybe<String>;
}

export interface UserUpsertWithoutConceptsInput {
  update: UserUpdateWithoutConceptsDataInput;
  create: UserCreateWithoutConceptsInput;
}

export interface ConceptUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  instances?: Maybe<InstanceCreateManyWithoutCourseInput>;
}

export interface InstanceCreateManyWithoutCourseInput {
  create?: Maybe<
    InstanceCreateWithoutCourseInput[] | InstanceCreateWithoutCourseInput
  >;
  connect?: Maybe<InstanceWhereUniqueInput[] | InstanceWhereUniqueInput>;
}

export interface InstanceCreateWithoutCourseInput {
  id?: Maybe<ID_Input>;
  start_date: DateTimeInput;
  end_date: DateTimeInput;
  periods?: Maybe<InstanceCreateperiodsInput>;
  concepts?: Maybe<ConceptCreateManyInput>;
}

export interface InstanceCreateperiodsInput {
  set?: Maybe<Int[] | Int>;
}

export interface ConceptCreateManyInput {
  create?: Maybe<ConceptCreateInput[] | ConceptCreateInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface CourseUpdateInput {
  name?: Maybe<String>;
  instances?: Maybe<InstanceUpdateManyWithoutCourseInput>;
}

export interface InstanceUpdateManyWithoutCourseInput {
  create?: Maybe<
    InstanceCreateWithoutCourseInput[] | InstanceCreateWithoutCourseInput
  >;
  delete?: Maybe<InstanceWhereUniqueInput[] | InstanceWhereUniqueInput>;
  connect?: Maybe<InstanceWhereUniqueInput[] | InstanceWhereUniqueInput>;
  set?: Maybe<InstanceWhereUniqueInput[] | InstanceWhereUniqueInput>;
  disconnect?: Maybe<InstanceWhereUniqueInput[] | InstanceWhereUniqueInput>;
  update?: Maybe<
    | InstanceUpdateWithWhereUniqueWithoutCourseInput[]
    | InstanceUpdateWithWhereUniqueWithoutCourseInput
  >;
  upsert?: Maybe<
    | InstanceUpsertWithWhereUniqueWithoutCourseInput[]
    | InstanceUpsertWithWhereUniqueWithoutCourseInput
  >;
  deleteMany?: Maybe<InstanceScalarWhereInput[] | InstanceScalarWhereInput>;
  updateMany?: Maybe<
    | InstanceUpdateManyWithWhereNestedInput[]
    | InstanceUpdateManyWithWhereNestedInput
  >;
}

export interface InstanceUpdateWithWhereUniqueWithoutCourseInput {
  where: InstanceWhereUniqueInput;
  data: InstanceUpdateWithoutCourseDataInput;
}

export interface InstanceUpdateWithoutCourseDataInput {
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  periods?: Maybe<InstanceUpdateperiodsInput>;
  concepts?: Maybe<ConceptUpdateManyInput>;
}

export interface InstanceUpdateperiodsInput {
  set?: Maybe<Int[] | Int>;
}

export interface ConceptUpdateManyInput {
  create?: Maybe<ConceptCreateInput[] | ConceptCreateInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueNestedInput[]
    | ConceptUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueNestedInput[]
    | ConceptUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateDataInput;
}

export interface ConceptUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutConceptsInput>;
  official?: Maybe<Boolean>;
}

export interface ConceptUpsertWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateDataInput;
  create: ConceptCreateInput;
}

export interface ConceptScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  official?: Maybe<Boolean>;
  official_not?: Maybe<Boolean>;
  AND?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  OR?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  NOT?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
}

export interface ConceptUpdateManyWithWhereNestedInput {
  where: ConceptScalarWhereInput;
  data: ConceptUpdateManyDataInput;
}

export interface ConceptUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
}

export interface InstanceUpsertWithWhereUniqueWithoutCourseInput {
  where: InstanceWhereUniqueInput;
  update: InstanceUpdateWithoutCourseDataInput;
  create: InstanceCreateWithoutCourseInput;
}

export interface InstanceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  start_date?: Maybe<DateTimeInput>;
  start_date_not?: Maybe<DateTimeInput>;
  start_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_lt?: Maybe<DateTimeInput>;
  start_date_lte?: Maybe<DateTimeInput>;
  start_date_gt?: Maybe<DateTimeInput>;
  start_date_gte?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  end_date_not?: Maybe<DateTimeInput>;
  end_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_lt?: Maybe<DateTimeInput>;
  end_date_lte?: Maybe<DateTimeInput>;
  end_date_gt?: Maybe<DateTimeInput>;
  end_date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InstanceScalarWhereInput[] | InstanceScalarWhereInput>;
  OR?: Maybe<InstanceScalarWhereInput[] | InstanceScalarWhereInput>;
  NOT?: Maybe<InstanceScalarWhereInput[] | InstanceScalarWhereInput>;
}

export interface InstanceUpdateManyWithWhereNestedInput {
  where: InstanceScalarWhereInput;
  data: InstanceUpdateManyDataInput;
}

export interface InstanceUpdateManyDataInput {
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  periods?: Maybe<InstanceUpdateperiodsInput>;
}

export interface CourseUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface InstanceCreateInput {
  id?: Maybe<ID_Input>;
  start_date: DateTimeInput;
  end_date: DateTimeInput;
  periods?: Maybe<InstanceCreateperiodsInput>;
  course: CourseCreateOneWithoutInstancesInput;
  concepts?: Maybe<ConceptCreateManyInput>;
}

export interface CourseCreateOneWithoutInstancesInput {
  create?: Maybe<CourseCreateWithoutInstancesInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutInstancesInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface InstanceUpdateInput {
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  periods?: Maybe<InstanceUpdateperiodsInput>;
  course?: Maybe<CourseUpdateOneRequiredWithoutInstancesInput>;
  concepts?: Maybe<ConceptUpdateManyInput>;
}

export interface CourseUpdateOneRequiredWithoutInstancesInput {
  create?: Maybe<CourseCreateWithoutInstancesInput>;
  update?: Maybe<CourseUpdateWithoutInstancesDataInput>;
  upsert?: Maybe<CourseUpsertWithoutInstancesInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateWithoutInstancesDataInput {
  name?: Maybe<String>;
}

export interface CourseUpsertWithoutInstancesInput {
  update: CourseUpdateWithoutInstancesDataInput;
  create: CourseCreateWithoutInstancesInput;
}

export interface InstanceUpdateManyMutationInput {
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  periods?: Maybe<InstanceUpdateperiodsInput>;
}

export interface LinkCreateInput {
  id?: Maybe<ID_Input>;
  from: ConceptCreateOneInput;
  to: ConceptCreateOneInput;
  user: UserCreateOneInput;
  official?: Maybe<Boolean>;
}

export interface ConceptCreateOneInput {
  create?: Maybe<ConceptCreateInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  concepts?: Maybe<ConceptCreateManyWithoutUserInput>;
}

export interface ConceptCreateManyWithoutUserInput {
  create?: Maybe<
    ConceptCreateWithoutUserInput[] | ConceptCreateWithoutUserInput
  >;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
}

export interface ConceptCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  official?: Maybe<Boolean>;
}

export interface LinkUpdateInput {
  from?: Maybe<ConceptUpdateOneRequiredInput>;
  to?: Maybe<ConceptUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  official?: Maybe<Boolean>;
}

export interface ConceptUpdateOneRequiredInput {
  create?: Maybe<ConceptCreateInput>;
  update?: Maybe<ConceptUpdateDataInput>;
  upsert?: Maybe<ConceptUpsertNestedInput>;
  connect?: Maybe<ConceptWhereUniqueInput>;
}

export interface ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput;
  create: ConceptCreateInput;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  concepts?: Maybe<ConceptUpdateManyWithoutUserInput>;
}

export interface ConceptUpdateManyWithoutUserInput {
  create?: Maybe<
    ConceptCreateWithoutUserInput[] | ConceptCreateWithoutUserInput
  >;
  delete?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  connect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  set?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  disconnect?: Maybe<ConceptWhereUniqueInput[] | ConceptWhereUniqueInput>;
  update?: Maybe<
    | ConceptUpdateWithWhereUniqueWithoutUserInput[]
    | ConceptUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ConceptUpsertWithWhereUniqueWithoutUserInput[]
    | ConceptUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ConceptScalarWhereInput[] | ConceptScalarWhereInput>;
  updateMany?: Maybe<
    | ConceptUpdateManyWithWhereNestedInput[]
    | ConceptUpdateManyWithWhereNestedInput
  >;
}

export interface ConceptUpdateWithWhereUniqueWithoutUserInput {
  where: ConceptWhereUniqueInput;
  data: ConceptUpdateWithoutUserDataInput;
}

export interface ConceptUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  official?: Maybe<Boolean>;
}

export interface ConceptUpsertWithWhereUniqueWithoutUserInput {
  where: ConceptWhereUniqueInput;
  update: ConceptUpdateWithoutUserDataInput;
  create: ConceptCreateWithoutUserInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface LinkUpdateManyMutationInput {
  official?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  concepts?: Maybe<ConceptUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
}

export interface ConceptSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConceptWhereInput>;
  AND?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  OR?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
  NOT?: Maybe<ConceptSubscriptionWhereInput[] | ConceptSubscriptionWhereInput>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface InstanceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InstanceWhereInput>;
  AND?: Maybe<
    InstanceSubscriptionWhereInput[] | InstanceSubscriptionWhereInput
  >;
  OR?: Maybe<InstanceSubscriptionWhereInput[] | InstanceSubscriptionWhereInput>;
  NOT?: Maybe<
    InstanceSubscriptionWhereInput[] | InstanceSubscriptionWhereInput
  >;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LinkWhereInput>;
  AND?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  OR?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
  NOT?: Maybe<LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Concept {
  id: ID_Output;
  name: String;
  description: String;
  official: Boolean;
}

export interface ConceptPromise extends Promise<Concept>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  user: <T = UserPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface ConceptSubscription
  extends Promise<AsyncIterator<Concept>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface ConceptNullablePromise
  extends Promise<Concept | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  user: <T = UserPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface User {
  id: ID_Output;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConceptConnection {
  pageInfo: PageInfo;
  edges: ConceptEdge[];
}

export interface ConceptConnectionPromise
  extends Promise<ConceptConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConceptEdge>>() => T;
  aggregate: <T = AggregateConceptPromise>() => T;
}

export interface ConceptConnectionSubscription
  extends Promise<AsyncIterator<ConceptConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConceptEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConceptSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConceptEdge {
  node: Concept;
  cursor: String;
}

export interface ConceptEdgePromise extends Promise<ConceptEdge>, Fragmentable {
  node: <T = ConceptPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConceptEdgeSubscription
  extends Promise<AsyncIterator<ConceptEdge>>,
    Fragmentable {
  node: <T = ConceptSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConcept {
  count: Int;
}

export interface AggregateConceptPromise
  extends Promise<AggregateConcept>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConceptSubscription
  extends Promise<AsyncIterator<AggregateConcept>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Course {
  id: ID_Output;
  name: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  instances: <T = FragmentableArray<Instance>>(args?: {
    where?: InstanceWhereInput;
    orderBy?: InstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  instances: <T = Promise<AsyncIterator<InstanceSubscription>>>(args?: {
    where?: InstanceWhereInput;
    orderBy?: InstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  instances: <T = FragmentableArray<Instance>>(args?: {
    where?: InstanceWhereInput;
    orderBy?: InstanceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Instance {
  id: ID_Output;
  start_date: DateTimeOutput;
  end_date: DateTimeOutput;
  periods: Int[];
}

export interface InstancePromise extends Promise<Instance>, Fragmentable {
  id: () => Promise<ID_Output>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
  periods: () => Promise<Int[]>;
  course: <T = CoursePromise>() => T;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InstanceSubscription
  extends Promise<AsyncIterator<Instance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  periods: () => Promise<AsyncIterator<Int[]>>;
  course: <T = CourseSubscription>() => T;
  concepts: <T = Promise<AsyncIterator<ConceptSubscription>>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface InstanceNullablePromise
  extends Promise<Instance | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
  periods: () => Promise<Int[]>;
  course: <T = CoursePromise>() => T;
  concepts: <T = FragmentableArray<Concept>>(args?: {
    where?: ConceptWhereInput;
    orderBy?: ConceptOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InstanceConnection {
  pageInfo: PageInfo;
  edges: InstanceEdge[];
}

export interface InstanceConnectionPromise
  extends Promise<InstanceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InstanceEdge>>() => T;
  aggregate: <T = AggregateInstancePromise>() => T;
}

export interface InstanceConnectionSubscription
  extends Promise<AsyncIterator<InstanceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InstanceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInstanceSubscription>() => T;
}

export interface InstanceEdge {
  node: Instance;
  cursor: String;
}

export interface InstanceEdgePromise
  extends Promise<InstanceEdge>,
    Fragmentable {
  node: <T = InstancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InstanceEdgeSubscription
  extends Promise<AsyncIterator<InstanceEdge>>,
    Fragmentable {
  node: <T = InstanceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInstance {
  count: Int;
}

export interface AggregateInstancePromise
  extends Promise<AggregateInstance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInstanceSubscription
  extends Promise<AsyncIterator<AggregateInstance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Link {
  id: ID_Output;
  official: Boolean;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  user: <T = UserPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = ConceptSubscription>() => T;
  to: <T = ConceptSubscription>() => T;
  user: <T = UserSubscription>() => T;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface LinkNullablePromise
  extends Promise<Link | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = ConceptPromise>() => T;
  to: <T = ConceptPromise>() => T;
  user: <T = UserPromise>() => T;
  official: () => Promise<Boolean>;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConceptSubscriptionPayload {
  mutation: MutationType;
  node: Concept;
  updatedFields: String[];
  previousValues: ConceptPreviousValues;
}

export interface ConceptSubscriptionPayloadPromise
  extends Promise<ConceptSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConceptPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConceptPreviousValuesPromise>() => T;
}

export interface ConceptSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConceptSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConceptSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConceptPreviousValuesSubscription>() => T;
}

export interface ConceptPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  official: Boolean;
}

export interface ConceptPreviousValuesPromise
  extends Promise<ConceptPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  official: () => Promise<Boolean>;
}

export interface ConceptPreviousValuesSubscription
  extends Promise<AsyncIterator<ConceptPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  name: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface InstanceSubscriptionPayload {
  mutation: MutationType;
  node: Instance;
  updatedFields: String[];
  previousValues: InstancePreviousValues;
}

export interface InstanceSubscriptionPayloadPromise
  extends Promise<InstanceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InstancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InstancePreviousValuesPromise>() => T;
}

export interface InstanceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InstanceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InstanceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InstancePreviousValuesSubscription>() => T;
}

export interface InstancePreviousValues {
  id: ID_Output;
  start_date: DateTimeOutput;
  end_date: DateTimeOutput;
  periods: Int[];
}

export interface InstancePreviousValuesPromise
  extends Promise<InstancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
  periods: () => Promise<Int[]>;
}

export interface InstancePreviousValuesSubscription
  extends Promise<AsyncIterator<InstancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  periods: () => Promise<AsyncIterator<Int[]>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  official: Boolean;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  official: () => Promise<Boolean>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  official: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Instance",
    embedded: false
  },
  {
    name: "Concept",
    embedded: false
  },
  {
    name: "Link",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
